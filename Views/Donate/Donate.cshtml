@model Accounts.ViewModels.DonateViewModel
@{
    ViewData["Title"] = "Donate";
}

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="mb-3 text-primary"><i class="fas fa-hand-holding-heart"></i> Make a Donation</h3>
                    <form id="donationForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="TotalDonation" class="form-label">Total Amount to Donate</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input asp-for="TotalDonation" class="form-control" id="TotalDonation" type="number" min="1" step="0.01" />
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Remaining Balance</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input class="form-control" id="RemainingBalance" readonly />
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center flex-wrap gap-2">
                    <h4 class="mb-0"><i class="fas fa-map-marked-alt"></i> Beneficiaries Map</h4>
                    <div class="d-flex gap-3 flex-wrap">
                        <div class="btn-group" role="group">
                            <input type="radio" class="btn-check" name="layerFilter" id="showNeedies" value="needy" checked>
                            <label class="btn btn-outline-danger" for="showNeedies"><i class="fas fa-users"></i> Needies</label>
                            <input type="radio" class="btn-check" name="layerFilter" id="showCharities" value="charity">
                            <label class="btn btn-outline-success" for="showCharities"><i class="fas fa-heart"></i> Charities</label>
                            <input type="radio" class="btn-check" name="layerFilter" id="showBoth" value="both">
                            <label class="btn btn-outline-primary" for="showBoth"><i class="fas fa-globe"></i> Both</label>
                        </div>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-primary" id="findNearMeBtn" title="Find cases within 10km of your location"><i class="fas fa-location-arrow"></i> Find Near Me</button>
                            <button type="button" class="btn btn-outline-secondary" id="toggleSketchBtn" title="Select multiple points by drawing a shape"><i class="fas fa-draw-polygon"></i> Multi-Select</button>
                            <button type="button" class="btn btn-outline-info" id="zoomToAllBtn" title="Zoom to show all visible points"><i class="fas fa-expand-arrows-alt"></i> Zoom to All</button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div id="mapViewDiv" style="height: 500px; width: 100%;"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center flex-wrap gap-2">
                    <h4 class="mb-0"><i class="fas fa-table"></i> Beneficiaries List</h4>
                    <div class="d-flex gap-3 flex-wrap align-items-center">
                        <select id="governorateFilter" class="form-select form-select-sm" style="width: 180px;">
                            <option value="">All Governorates</option>
                        </select>
                        <select id="roleFilter" class="form-select form-select-sm" style="width: 150px;"></select>
                        <select id="fieldFilter" class="form-select form-select-sm" style="width: 150px;"></select>
                        <div class="form-check form-switch" title="Hide beneficiaries whose needs have been met">
                            <input class="form-check-input" type="checkbox" role="switch" id="hideZeroNeededFilter">
                            <label class="form-check-label" for="hideZeroNeededFilter">Hide Completed</label>
                        </div>
                        <div class="btn-group btn-group-sm">
                            <button type="button" class="btn btn-outline-primary" id="showAllBtn">Show All</button>
                            <button type="button" class="btn btn-outline-danger" id="clearSelectionBtn" title="Clear all selections"><i class="fas fa-times"></i> Clear Selections</button>
                        </div>
                        <a href="/Donate/ViewDonationHistory" class="btn btn-sm btn-outline-secondary"><i class="fas fa-history"></i> View History</a>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover align-middle" id="beneficiariesTable">
                            <thead class="table-light">
                                <tr>
                                    <th width="5%"><input type="checkbox" id="selectAllCheckbox" title="Select/Deselect All Visible on this page"></th>
                                    <th width="25%">Name</th>
                                    <th width="15%">Needed</th>
                                    <th width="15%">Type</th>
                                    <th width="20%">Fields/Sector</th>
                                    <th width="20%">Donate</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr><td colspan="6" class="text-center p-5"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Loading Data...</p></td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between align-items-center flex-wrap gap-2">
                    <div>
                        <label for="rowsPerPage" class="form-label me-2 mb-0">Rows per page:</label>
                        <select id="rowsPerPage" class="form-select form-select-sm d-inline-block" style="width: 75px;">
                            <option value="10">10</option>
                            <option value="25" selected>25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </div>
                    <div id="paginationInfo" class="text-muted"></div>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary btn-sm" id="prevPageBtn" disabled><i class="fas fa-arrow-left"></i> Previous</button>
                        <button class="btn btn-outline-secondary btn-sm" id="nextPageBtn" disabled>Next <i class="fas fa-arrow-right"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-primary">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="fas fa-clipboard-list"></i> Donation Summary</h4>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped" id="donationSummary">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Amount</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div>
                            <h5 class="mb-0">Total Donations: <span id="totalDonationsAmount" class="text-success fw-bold">$0.00</span></h5>
                        </div>
                        <div>
                            <button class="btn btn-primary btn-lg" id="submitAllBtn" disabled>
                                <i class="fas fa-paper-plane"></i> Submit All Donations
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://js.arcgis.com/4.29/"></script>
    <link rel="stylesheet" href="https://js.arcgis.com/4.29/esri/themes/light/main.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <script>
        $(document).ready(function () {

            let donations = [], mapView, neediesLayer, charitiesLayer, sketchViewModel, governorateLayer;
            let highlightHandles = [];
            let selectedFeatures = new Map();
            let isSketchActive = false;
            let allBeneficiaries = [];
            let filteredBeneficiaries = [];
            let currentPage = 1;
            let rowsPerPage = 25;
            let governorates = {};
            let nearMeFilterGeometry = null;
            let userLocationGraphic = null;
            let runtimeGraphicsLayer;
            let Graphic, Point, geometryEngine, Extent, projection;
            const extentexpand = 0.5;

            const BufferArea = 10;
            const NEEDIES_SERVICE_URL = "https://services.arcgis.com/LxyOyIfeECQuFOsk/arcgis/rest/services/survey123_1b6326b33d2b4213bf757d6780a0f12a/FeatureServer/0";
            const CHARITIES_SERVICE_URL = "https://services.arcgis.com/LxyOyIfeECQuFOsk/arcgis/rest/services/survey123_2c36d5ade9064fe685d54893df3b37ea/FeatureServer/0";
            const GOVERNORATES_SERVICE_URL = "https://services.arcgis.com/LxyOyIfeECQuFOsk/arcgis/rest/services/EGY_PROV/FeatureServer/22";

            const NEEDY_COLOR = "#dc3545";
            const CHARITY_COLOR = "#198754";

            initializeMap();
            bindEvents();

            function bindEvents() {
                $(document).on("input", "#TotalDonation", updateRemaining);
                $(document).on("click", ".donate-btn", handleDonateClick);
                $(document).on("click", ".remove-donation-btn", handleRemoveDonation);
                $('#submitAllBtn').on("click", submitAllDonations);

                $('#governorateFilter, #roleFilter, #fieldFilter, #hideZeroNeededFilter, input[name="layerFilter"]').on('change', () => {
                    performFilteringAsync();
                });

                $('#showAllBtn').on('click', function () {
                    $('#governorateFilter, #roleFilter, #fieldFilter').val('');
                    $('#hideZeroNeededFilter').prop('checked', false);
                    nearMeFilterGeometry = null;
                    if (userLocationGraphic) {
                        runtimeGraphicsLayer.remove(userLocationGraphic);
                        userLocationGraphic = null;
                    }
                    performFilteringAsync();
                    zoomToAll();
                });

                $('#rowsPerPage').on('change', function () {
                    currentPage = 1;
                    renderTablePage();
                });

                $('#prevPageBtn').on('click', () => { if (currentPage > 1) { currentPage--; renderTablePage(); } });
                $('#nextPageBtn').on('click', () => {
                    const totalPages = Math.ceil(filteredBeneficiaries.length / rowsPerPage);
                    if (currentPage < totalPages) { currentPage++; renderTablePage(); }
                });

                $('#toggleSketchBtn').on('click', () => toggleSketchMode(!isSketchActive));
                $('#clearSelectionBtn').on('click', clearAllSelections);
                $('#zoomToAllBtn').on('click', zoomToAll);
                $('#selectAllCheckbox').on('change', handleSelectAll);
                $(document).on('change', '.row-checkbox', handleRowCheckboxChange);
                $('#findNearMeBtn').on('click', findNearMe);
            }

            function initializeMap() {
                require([
                    "esri/Map", "esri/views/MapView", "esri/layers/FeatureLayer",
                    "esri/layers/GraphicsLayer", "esri/widgets/Sketch/SketchViewModel",
                    "esri/renderers/SimpleRenderer", "esri/symbols/SimpleMarkerSymbol",
                    "esri/geometry/Extent", "esri/geometry/geometryEngine", "esri/geometry/projection",
                    "esri/Graphic", "esri/geometry/Point"
                ], function (Map, MapView, FeatureLayer, GraphicsLayer, SketchViewModel, SimpleRenderer, SimpleMarkerSymbol, esriExtent, esriGeometryEngine, esriProjection, esriGraphic, esriPoint) {

                    geometryEngine = esriGeometryEngine;
                    Graphic = esriGraphic;
                    Point = esriPoint;
                    Extent = esriExtent;
                    projection = esriProjection;

                    const map = new Map({ basemap: "streets-navigation-vector" });
                    mapView = new MapView({
                        container: "mapViewDiv", map: map, center: [31.2357, 30.0444], zoom: 6,
                        popup: { dockEnabled: true, dockOptions: { breakpoint: false, position: "top-right" } },
                        highlightOptions: { color: [255, 255, 0, 1], haloOpacity: 0.9, fillOpacity: 0.4 }
                    });

                    const createBeneficiaryRenderer = (color) => new SimpleRenderer({
                        symbol: new SimpleMarkerSymbol({ style: "circle", color: color, outline: { color: "white", width: 1 } }),
                        visualVariables: [{ type: "size", field: "how_much_do_you_need", stops: [{ value: 100, size: "8px" }, { value: 5000, size: "16px" }, { value: 50000, size: "32px" }] }]
                    });
                    const createClusterConfig = (popupTitle) => ({
                        type: "cluster", clusterRadius: "80px", popupTemplate: { title: `Cluster of ${popupTitle}`, content: "This cluster represents {cluster_count} beneficiaries." },
                        clusterMinSize: "24px", clusterMaxSize: "60px",
                        labelingInfo: [{ labelExpressionInfo: { expression: "Text($feature.cluster_count, '#,###')" }, symbol: { type: "text", color: "#ffffff", font: { weight: "bold", size: "12px" } }, labelPlacement: "center-center" }]
                    });

                    neediesLayer = new FeatureLayer({ url: NEEDIES_SERVICE_URL, title: "Needies", outFields: ["*"], popupTemplate: createPopupTemplate('needy'), renderer: createBeneficiaryRenderer(NEEDY_COLOR), featureReduction: createClusterConfig("Needies") });
                    charitiesLayer = new FeatureLayer({ url: CHARITIES_SERVICE_URL, title: "Charities", outFields: ["*"], popupTemplate: createPopupTemplate('charity'), renderer: createBeneficiaryRenderer(CHARITY_COLOR), featureReduction: createClusterConfig("Charities") });
                    governorateLayer = new FeatureLayer({ url: GOVERNORATES_SERVICE_URL, opacity: 0.15, renderer: { type: "simple", symbol: { type: "simple-fill", style: "none", outline: { color: "#4e4e4e", width: 1 } } }, labelingInfo: [] });
                    const sketchLayer = new GraphicsLayer();
                    runtimeGraphicsLayer = new GraphicsLayer();

                    map.addMany([governorateLayer, neediesLayer, charitiesLayer, sketchLayer, runtimeGraphicsLayer]);

                    sketchViewModel = new SketchViewModel({ view: mapView, layer: sketchLayer, polygonSymbol: { type: "simple-fill", color: [51, 51, 204, 0.2], outline: { color: "#3333cc", width: 2 } } });
                    mapView.on("click", handleMapClick);
                    sketchViewModel.on("create", handleSketchCreate);
                    loadAndProcessAllData();
                });
            }

            function loadAndProcessAllData() {
                showLoadingIndicator(true, "Performing Spatial Analysis & Loading Data...");
                const govPromise = governorateLayer.queryFeatures({ where: "1=1", outFields: ["name"], returnGeometry: true });
                const neediesPromise = neediesLayer.queryFeatures({ where: "1=1", outFields: ["*"], returnGeometry: true });
                const charitiesPromise = charitiesLayer.queryFeatures({ where: "1=1", outFields: ["*"], returnGeometry: true });

                Promise.all([govPromise, neediesPromise, charitiesPromise])
                    .then(([govResults, neediesResults, charitiesResults]) => {
                        populateGovernorateFilter(govResults.features);
                        let rawBeneficiaries = [...neediesResults.features, ...charitiesResults.features];
                        allBeneficiaries = rawBeneficiaries.map(feature => {
                            const containingGov = govResults.features.find(govFeature => geometryEngine.contains(govFeature.geometry, feature.geometry));
                            const layerType = feature.layer.title === 'Needies' ? 'needy' : 'charity';
                            const processed = processFeature(feature, layerType);
                            processed.governorate = containingGov ? containingGov.attributes.name : 'N/A';
                            return processed;
                        });
                        populateFilters();
                        performFilteringAsync();
                    })
                    .catch(handleDataLoadError)
                    .finally(() => showLoadingIndicator(false));
            }

            function processFeature(feature, layerType) {
                const attrs = feature.attributes;
                const isCharity = layerType === 'charity';
                return {
                    id: `${layerType}_${attrs.objectid}`, name: isCharity ? attrs.charity_name : attrs.full_name,
                    neededAmount: attrs.how_much_do_you_need || 0, userType: isCharity ? 'Charity' : 'Needy',
                    helpFields: isCharity ? (attrs.charity_sector || 'General').split(/[,;]/).map(s => s.trim()) : [attrs.type_of_need || 'General'],
                    email: isCharity ? attrs.enter_your_e_mail : attrs.email,
                    layerType: layerType, objectId: attrs.objectid, governorate: 'N/A', geometry: feature.geometry
                };
            }

            function findNearMe() {
                if (!navigator.geolocation) { alert("Geolocation is not supported by this browser."); return; }
                if (!geometryEngine || !Point || !Graphic || !projection) { alert("Mapping components are not ready yet. Please try again in a moment."); return; }
                showLoadingIndicator(true, "Getting your location...");
                const options = { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 };
                navigator.geolocation.getCurrentPosition(handleLocationSuccess, handleLocationError, options);
            }

            async function handleLocationSuccess(position) {
                try {
                    const coords = position.coords;
                    const userPoint = new Point({ longitude: coords.longitude, latitude: coords.latitude, spatialReference: { wkid: 4326 } });
                    if (!projection.isLoaded()) { await projection.load(); }
                    const projectedPoint = projection.project(userPoint, { wkid: 3857 });
                    const bufferIn3857 = geometryEngine.buffer(projectedPoint, BufferArea, "kilometers");
                    nearMeFilterGeometry = projection.project(bufferIn3857, { wkid: 4326 });
                    if (userLocationGraphic) { runtimeGraphicsLayer.remove(userLocationGraphic); }
                    userLocationGraphic = new Graphic({
                        geometry: userPoint,
                        symbol: { type: "simple-marker", style: "circle", color: "#007bff", size: "12px", outline: { color: [255, 255, 255], width: 2 } }
                    });
                    runtimeGraphicsLayer.add(userLocationGraphic);
                    mapView.goTo(bufferIn3857.extent.expand(extentexpand));
                    performFilteringAsync();
                } catch (e) {
                    console.error("Error in handleLocationSuccess:", e);
                    alert("An error occurred while processing your location. Please check the console (F12) for more details.");
                } finally {
                    showLoadingIndicator(false);
                }
            }

            function handleLocationError(error) {
                showLoadingIndicator(false);
                let message = "An unknown error occurred.";
                switch (error.code) {
                    case error.PERMISSION_DENIED: message = "You denied the request for Geolocation."; break;
                    case error.POSITION_UNAVAILABLE: message = "Location information is unavailable."; break;
                    case error.TIMEOUT: message = "The request to get user location timed out."; break;
                }
                alert(`Error getting location: ${message}`);
            }

            function performFilteringAsync() {
                showLoadingIndicator(true, "Applying filters...");
                setTimeout(() => {
                    const spatialFilter = getCombinedSpatialFilter();
                    applyMapLayerFilter(spatialFilter);
                    const attributeFilters = getAttributeFilters();
                    let results = [];
                    for (const beneficiary of allBeneficiaries) {
                        const spatialMatch = !spatialFilter || (beneficiary.geometry && geometryEngine.contains(spatialFilter, beneficiary.geometry));
                        if (spatialMatch && checkAttributeMatch(beneficiary, attributeFilters)) {
                            results.push(beneficiary);
                        }
                    }
                    filteredBeneficiaries = results;
                    currentPage = 1;
                    renderTablePage();
                    highlightSelection();
                    showLoadingIndicator(false);
                }, 50);
            }

            function getCombinedSpatialFilter() {
                let spatialGeometry = null;
                const govFilter = $('#governorateFilter').val();
                if (govFilter && governorates[govFilter]) {
                    spatialGeometry = governorates[govFilter].geometry;
                }
                if (nearMeFilterGeometry) {
                    spatialGeometry = spatialGeometry
                        ? geometryEngine.intersect(spatialGeometry, nearMeFilterGeometry)
                        : nearMeFilterGeometry;
                }
                return spatialGeometry;
            }

            function applyMapLayerFilter(geometry) {
                const filter = geometry ? { geometry } : null;
                if (neediesLayer) neediesLayer.filter = filter;
                if (charitiesLayer) charitiesLayer.filter = filter;
            }

            function getAttributeFilters() {
                return {
                    role: $('#roleFilter').val(),
                    field: $('#fieldFilter').val(),
                    hideZero: $('#hideZeroNeededFilter').prop('checked'),
                    layerType: $('input[name="layerFilter"]:checked').val()
                };
            }

            function checkAttributeMatch(beneficiary, filters) {
                const layerMatch = filters.layerType === 'both' || beneficiary.layerType === filters.layerType;
                const zeroMatch = !filters.hideZero || beneficiary.neededAmount > 0;
                const roleMatch = !filters.role || beneficiary.userType === filters.role;
                const fieldMatch = !filters.field || beneficiary.helpFields.some(f => f.trim() === filters.field);
                return layerMatch && zeroMatch && roleMatch && fieldMatch;
            }

            function populateGovernorateFilter(govFeatures) {
                const select = $('#governorateFilter');
                govFeatures.map(feature => feature.attributes.name).sort().forEach(govName => {
                    governorates[govName] = { geometry: govFeatures.find(f => f.attributes.name === govName).geometry };
                    select.append(`<option value="${govName}">${govName}</option>`);
                });
            }

            function renderTablePage() {
                const tbody = $("#beneficiariesTable tbody").empty();
                updatePaginationControls(filteredBeneficiaries.length);
                if (filteredBeneficiaries.length === 0) {
                    tbody.html('<tr><td colspan="6" class="text-center p-5">No matching beneficiaries found.</td></tr>');
                    return;
                }
                const startIndex = (currentPage - 1) * rowsPerPage;
                const pageItems = filteredBeneficiaries.slice(startIndex, startIndex + rowsPerPage);
                pageItems.forEach(b => {
                    const fieldsHtml = b.helpFields.map(field => `<span class="badge bg-info text-dark me-1">${field.trim()}</span>`).join('');
                    const typeBadgeColor = b.userType === 'Charity' ? CHARITY_COLOR : NEEDY_COLOR;
                    const beneficiaryData = JSON.stringify(b, (key, value) => key === 'geometry' ? undefined : value);
                    tbody.append(
                        `<tr data-id="${b.id}" class="beneficiary-row">
                            <td><input type="checkbox" class="form-check-input row-checkbox" data-id="${b.id}"></td>
                            <td class="fw-semibold">${b.name}</td>
                            <td class="text-end fw-bold text-danger">${formatCurrency(b.neededAmount)}</td>
                            <td><span class="badge text-white" style="background-color: ${typeBadgeColor}; font-size: 1.1em; padding: 0.4em 0.6em;">${b.userType}</span></td>
                            <td>${fieldsHtml}</td>
                            <td>
                                <div class="input-group input-group-sm">
                                    <input type="number" class="form-control donate-amount" min="1" max="${b.neededAmount || 1}" placeholder="Amount" />
                                    <button type="button" class="btn btn-success donate-btn" data-beneficiary='${beneficiaryData}'><i class="fas fa-heart"></i></button>
                                </div>
                            </td>
                        </tr>`
                    );
                });
                updateTableSelectionVisuals();
            }

            function populateFilters() {
                const allTypes = [...new Set(allBeneficiaries.map(b => b.userType))];
                const allFields = [...new Set(allBeneficiaries.flatMap(b => b.helpFields.map(f => f.trim())))].sort();
                $('#roleFilter').html('<option value="">All Types</option>' + allTypes.map(r => `<option value="${r}">${r}</option>`).join(''));
                $('#fieldFilter').html('<option value="">All Fields</option>' + allFields.map(f => `<option value="${f}">${f}</option>`).join(''));
            }

            function updatePaginationControls(totalRows) {
                const totalPages = Math.ceil(totalRows / rowsPerPage);
                const paginationFooter = $('#paginationInfo').closest('.card-footer');
                if (totalPages <= 1) {
                    paginationFooter.hide();
                    return;
                }
                paginationFooter.show();
                $('#prevPageBtn').prop('disabled', currentPage === 1);
                $('#nextPageBtn').prop('disabled', currentPage === totalPages);
                const startRecord = (currentPage - 1) * rowsPerPage + 1;
                const endRecord = Math.min(startRecord + rowsPerPage - 1, totalRows);
                $('#paginationInfo').text(`Showing ${startRecord} - ${endRecord} of ${totalRows}`);
            }

            function zoomToAll() {
                if (Extent) {
                    const egyptExtent = new Extent({
                        xmin: 25.0, ymin: 22.0, xmax: 36.0, ymax: 32.0,
                        spatialReference: { wkid: 4326 }
                    });
                    if (mapView) {
                        mapView.goTo(egyptExtent);
                    }
                }
            }

            function handleMapClick(event) {
                if (isSketchActive) return;
                mapView.hitTest(event).then(response => {
                    const graphicResult = response.results.find(r => r.graphic && (r.graphic.layer || r.graphic.isAggregate));
                    if (!graphicResult) return;
                    const graphic = graphicResult.graphic;
                    if (graphic.isAggregate) {
                        mapView.goTo({ target: graphic.geometry, zoom: mapView.zoom + 2 });
                        return;
                    }
                    if (graphic.layer && graphic.layer.visible && (graphic.layer.title === "Needies" || graphic.layer.title === "Charities")) {
                        const layerType = graphic.layer.title === 'Needies' ? 'needy' : 'charity';
                        toggleFeatureSelection(`${layerType}_${graphic.attributes.objectid}`);
                    }
                });
            }

            function updateSummary() {
                const tbody = $("#donationSummary tbody");
                tbody.empty();
                if (donations.length === 0) {
                    tbody.html('<tr><td colspan="4" class="text-center text-muted">No donations added yet.</td></tr>');
                } else {
                    donations.forEach(d => tbody.append(`<tr><td>${d.name}</td><td>${d.userType}</td><td>${formatCurrency(d.amount)}</td><td><button class="btn btn-sm btn-outline-danger remove-donation-btn" data-id="${d.id}"><i class="fas fa-trash"></i></button></td></tr>`));
                }
                $('#totalDonationsAmount').text(formatCurrency(donations.reduce((sum, d) => sum + d.amount, 0)));
                updateRemaining();
            }

            function formatCurrency(value) {
                return (value || 0).toLocaleString("en-US", { style: "currency", currency: "USD" });
            }

            function createPopupTemplate(type) {
                const isNeedy = "needy" === type;
                const title = isNeedy ? "{full_name}" : "{charity_name}";
                const typeField = isNeedy ? "type_of_need" : "charity_sector";
                const amountField = "how_much_do_you_need";

                return {
                    title: title,
                    content: [{
                        type: "fields",
                        fieldInfos: [
                            { fieldName: typeField, label: isNeedy ? "Need Type" : "Sector" },
                            {
                                fieldName: amountField,
                                label: "Amount Needed",
                                format: { digitSeparator: true, places: 2 }
                            }
                        ]
                    }]
                };
            }

            function showLoadingIndicator(show, message = "Loading Data...") {
                const placeholder = `<tr><td colspan="6" class="text-center p-5"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">${message}</p></td></tr>`;
                if (show) {
                    $('#beneficiariesTable tbody').html(placeholder);
                } else {
                    if ($('#beneficiariesTable tbody').find('.spinner-border').length > 0) {
                        $('#beneficiariesTable tbody').empty();
                    }
                }
            }

            function handleDataLoadError(error) {
                console.error("Error during data load or analysis:", error);
                const errorMsg = 'Failed to load or process data. Please check network connection and service status.';
                $('#beneficiariesTable tbody').html(`<tr><td colspan="6" class="text-center text-danger p-5">${errorMsg}</td></tr>`);
            }

            function toggleFeatureSelection(id) {
                const beneficiary = allBeneficiaries.find(b => b.id === id);
                if (!beneficiary) return;
                if (selectedFeatures.has(id)) {
                    selectedFeatures.delete(id);
                } else {
                    selectedFeatures.set(id, beneficiary);
                }
                updateSelectionCount();
                updateTableSelectionVisuals();
                highlightSelection();
            }

            function clearAllSelections() {
                selectedFeatures.clear();
                if (sketchViewModel) sketchViewModel.layer.removeAll();
                if (runtimeGraphicsLayer) runtimeGraphicsLayer.removeAll();
                nearMeFilterGeometry = null;
                updateSelectionCount();
                updateTableSelectionVisuals();
                highlightSelection();
            }

            function highlightSelection() {
                if (highlightHandles) {
                    highlightHandles.forEach(h => h.remove());
                }
                highlightHandles = [];
                if (selectedFeatures.size === 0) return;
                const idsByType = { needy: [], charity: [] };
                selectedFeatures.forEach(b => idsByType[b.layerType].push(b.objectId));
                if (idsByType.needy.length > 0 && neediesLayer.visible) {
                    mapView.whenLayerView(neediesLayer).then(lv => { if (lv) highlightHandles.push(lv.highlight(idsByType.needy)); });
                }
                if (idsByType.charity.length > 0 && charitiesLayer.visible) {
                    mapView.whenLayerView(charitiesLayer).then(lv => { if (lv) highlightHandles.push(lv.highlight(idsByType.charity)); });
                }
            }

            function handleRowCheckboxChange() {
                toggleFeatureSelection($(this).data("id"));
            }

            function handleSketchCreate(event) {
                if ("complete" === event.state) {
                    const geometry = event.graphic.geometry;
                    sketchViewModel.layer.removeAll();
                    toggleSketchMode(false);
                    const layersToQuery = getVisibleLayers();
                    const queryPromises = layersToQuery.map(layer => layer.queryFeatures({ geometry: geometry, spatialRelationship: "intersects", outFields: ["*"] }));
                    Promise.all(queryPromises).then(results => {
                        results.forEach((featureSet, index) => {
                            const layerType = "Needies" === layersToQuery[index].title ? "needy" : "charity";
                            featureSet.features.forEach(feature => {
                                const processed = allBeneficiaries.find(b => b.objectId === feature.attributes.objectid && b.layerType === layerType);
                                if (processed && !selectedFeatures.has(processed.id)) {
                                    selectedFeatures.set(processed.id, processed);
                                }
                            });
                        });
                        updateSelectionCount();
                        updateTableSelectionVisuals();
                        highlightSelection();
                    }).catch(err => console.error("Sketch query error:", err));
                }
            }

            function handleSelectAll() {
                const isChecked = $(this).prop("checked");
                $("#beneficiariesTable tbody tr:visible .row-checkbox").each(function () {
                    const id = $(this).data("id");
                    const beneficiary = filteredBeneficiaries.find(b => b.id === id);
                    if (beneficiary) {
                        if (isChecked) {
                            if (!selectedFeatures.has(id)) selectedFeatures.set(id, beneficiary);
                        } else {
                            if (selectedFeatures.has(id)) selectedFeatures.delete(id);
                        }
                    }
                });
                updateSelectionCount();
                updateTableSelectionVisuals();
                highlightSelection();
            }

            function submitAllDonations() {
                if (donations.length !== 0) {
                    const dataToSubmit = donations.map(d => ({ Type: d.id.split("_")[0], BeneficiaryId: parseInt(d.id.split("_")[1]), Amount: d.amount }));
                    $("#submitAllBtn").prop("disabled", true).html('<div class="spinner-border spinner-border-sm"></div> Submitting...');
                    $.ajax({
                        url: "/Donate/SubmitDonations", type: "POST", contentType: "application/json", data: JSON.stringify(dataToSubmit),
                        success: res => {
                            if (res.success) {
                                alert("Donations recorded successfully!");
                                location.reload();
                            } else {
                                alert("An error occurred: " + (res.message || "Unknown error"));
                                $("#submitAllBtn").prop("disabled", false).html('<i class="fas fa-paper-plane"></i> Submit All Donations');
                            }
                        },
                        error: xhr => {
                            alert("A server error occurred!");
                            console.error(xhr.responseText);
                            $("#submitAllBtn").prop("disabled", false).html('<i class="fas fa-paper-plane"></i> Submit All Donations');
                        }
                    });
                }
            }

            function handleDonateClick() {
                const beneficiaryJson = $(this).attr("data-beneficiary");
                const beneficiary = JSON.parse(beneficiaryJson);
                const input = $(this).closest("tr").find(".donate-amount");
                const amount = parseFloat(input.val());
                const total = parseFloat($("#TotalDonation").val()) || 0;
                const used = donations.reduce((sum, d) => sum + d.amount, 0);
                if (!amount || amount < 1 || amount > (total - used)) {
                    alert(`Invalid amount. Please enter a value between 1 and the remaining balance of ${formatCurrency(total - used)}.`);
                    input.addClass("is-invalid").focus();
                    return;
                }
                if (beneficiary.neededAmount > 0 && amount > beneficiary.neededAmount) {
                    alert(`Donation cannot exceed the needed amount of ${formatCurrency(beneficiary.neededAmount)}.`);
                    input.addClass("is-invalid").focus();
                    return;
                }
                if (donations.some(d => d.id === beneficiary.id)) {
                    alert("You have already added a donation for this beneficiary.");
                    return;
                }
                input.removeClass("is-invalid");
                donations.push({ id: beneficiary.id, name: beneficiary.name, userType: beneficiary.userType, amount: amount });
                $(this).prop("disabled", true).html('<i class="fas fa-check"></i> Added');
                input.prop("disabled", true);
                updateSummary();
            }

            function handleRemoveDonation() {
                const idToRemove = $(this).data("id");
                donations = donations.filter(d => d.id !== idToRemove);
                const row = $(`tr[data-id="${idToRemove}"]`);
                row.find(".donate-btn").prop("disabled", false).html('<i class="fas fa-heart"></i>');
                row.find(".donate-amount").prop("disabled", false);
                updateSummary();
            }

            function updateTableSelectionVisuals() {
                $(".row-checkbox").each(function () {
                    $(this).prop("checked", selectedFeatures.has($(this).data("id")));
                    $(this).closest("tr").toggleClass("table-info", selectedFeatures.has($(this).data("id")));
                });
                updateSelectAllCheckboxState();
            }

            function updateSelectionCount() {
                // Placeholder for potential future use
            }

            function updateSelectAllCheckboxState() {
                const allVisibleChecks = $("#beneficiariesTable tbody .row-checkbox");
                const allVisibleChecked = allVisibleChecks.filter(":checked");
                const selectAll = $("#selectAllCheckbox");
                selectAll.prop("checked", allVisibleChecks.length > 0 && allVisibleChecks.length === allVisibleChecked.length);
                selectAll.prop("indeterminate", allVisibleChecked.length > 0 && allVisibleChecked.length < allVisibleChecks.length);
            }

            function updateRemaining() {
                const total = parseFloat($("#TotalDonation").val()) || 0;
                const used = donations.reduce((sum, d) => sum + d.amount, 0);
                $("#RemainingBalance").val((total - used).toFixed(2));
                $("#submitAllBtn").prop("disabled", donations.length === 0 || (total - used) < 0 || total === 0);
            }

            function toggleSketchMode(active) {
                isSketchActive = active;
                const btn = $("#toggleSketchBtn");
                if (active) {
                    btn.removeClass("btn-outline-secondary").addClass("btn-warning").html('<i class="fas fa-times"></i> Cancel');
                    sketchViewModel.create("polygon");
                } else {
                    sketchViewModel.cancel();
                    btn.removeClass("btn-warning").addClass("btn-outline-secondary").html('<i class="fas fa-draw-polygon"></i> Multi-Select');
                }
            }

            function getVisibleLayers() {
                const filterValue = $('input[name="layerFilter"]:checked').val();
                return "needy" === filterValue ? [neediesLayer] : "charity" === filterValue ? [charitiesLayer] : [neediesLayer, charitiesLayer];
            }

            function updateLayerVisibility() {
                if (neediesLayer) neediesLayer.visible = "needy" === $('input[name="layerFilter"]:checked').val() || "both" === $('input[name="layerFilter"]:checked').val();
                if (charitiesLayer) charitiesLayer.visible = "charity" === $('input[name="layerFilter"]:checked').val() || "both" === $('input[name="layerFilter"]:checked').val();
            }

        }); // End of $(document).ready()
    </script>
}