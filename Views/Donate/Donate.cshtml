@model Accounts.ViewModels.DonateViewModel
@{
    ViewData["Title"] = "Donate";
}
<style>
    .page-wrapper {
        transform: scale(0.75);
        transform-origin: top center;
        width: 133.33%;
        margin: 0 auto;
        margin-bottom: -25%;
    }

    .main-container {
        overflow: hidden;
    }

    /* 💡 START: AI Chat Widget CSS */
    #ai-chat-widget {
        position: fixed;
        bottom: 25px;
        right: 25px;
        z-index: 1050;
    }

    #ai-chat-toggle {
        width: 60px;
        height: 60px;
        font-size: 1.5rem;
        box-shadow: 0 4px 12px rgba(13, 110, 253, 0.3);
        transition: all 0.3s ease;
    }

        #ai-chat-toggle:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(13, 110, 253, 0.4);
        }

    #ai-chat-window {
        position: absolute;
        bottom: 80px;
        right: 0;
        width: 380px;
        height: 500px;
        background-color: white;
        display: flex;
        flex-direction: column;
        border: 1px solid #dee2e6;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
    }

    #ai-chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, #0d6efd, #0056b3);
    }

    #ai-chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 12px;
        max-height: 350px;
    }

    .ai-message, .user-message {
        padding: 12px 16px;
        border-radius: 18px;
        max-width: 85%;
        line-height: 1.5;
        word-wrap: break-word;
    }

    .ai-message {
        background-color: #f8f9fa;
        align-self: flex-start;
        border: 1px solid #e9ecef;
    }

    .user-message {
        background: linear-gradient(135deg, #0d6efd, #0056b3);
        color: white;
        align-self: flex-end;
    }

    .ai-message.error {
        background-color: #f8d7da;
        color: #721c24;
        border-color: #f5c6cb;
    }

    .ai-message.success {
        background-color: #d1e7dd;
        color: #0f5132;
        border-color: #badbcc;
    }

    .suggestion-btn {
        font-size: 0.85em;
        padding: 4px 8px;
        margin: 2px;
        border-radius: 12px;
        transition: all 0.2s ease;
    }

        .suggestion-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(13, 110, 253, 0.3);
        }

    .thinking-animation {
        animation: pulse 1.5s ease-in-out infinite;
    }

        keyframes pulse {
        0%

    {
        opacity: 1;
    }

    50% {
        opacity: 0.5;
    }

    100% {
        opacity: 1;
    }

    }

    #ai-chat-input {
        border-radius: 20px;
        border: 1px solid #dee2e6;
        padding: 8px 16px;
    }

        #ai-chat-input:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }

    .btn-send {
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>

<div id="ai-chat-widget">
    <button id="ai-chat-toggle" class="btn btn-primary btn-lg rounded-circle shadow">
        <i class="fas fa-robot"></i>
    </button>

    <div id="ai-chat-window" class="shadow-lg rounded" style="display: none;">
        <div id="ai-chat-header" class="text-white p-3 rounded-top">
            <h5 class="mb-0"><i class="fas fa-brain me-2"></i>AI Search Assistant</h5>
            <button id="ai-chat-close" type="button" class="btn-close btn-close-white"></button>
        </div>
        <div id="ai-chat-messages" class="p-3">
            <!-- Content will be added by JavaScript -->
        </div>
        <div id="ai-chat-input-container" class="p-3 border-top">
            <form id="ai-chat-form" class="d-flex align-items-center gap-2">
                <input type="text" id="ai-chat-input" class="form-control"
                       placeholder="Type your search request..." maxlength="500">
                <button type="submit" class="btn btn-primary btn-send">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>
        </div>
    </div>
</div>

<br />
<br />
<div class="main-container">
    <div class="row">
        <div style="display: flex; justify-content: center; align-items: center;">
            <div class="page-wrapper">
                <div class="row mb-4">
                    <div class="col-md-8 mx-auto">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h3 class="mb-3 text-primary"><i class="fas fa-hand-holding-heart"></i> Make a Donation</h3>
                                <form id="donationForm">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="TotalDonation" class="form-label">Total Amount to Donate</label>
                                            <div class="input-group">
                                                <span class="input-group-text">$</span>
                                                <input asp-for="TotalDonation" class="form-control" id="TotalDonation" type="number" min="1" step="0.01" />
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Remaining Balance</label>
                                            <div class="input-group">
                                                <span class="input-group-text">$</span>
                                                <input class="form-control" id="RemainingBalance" readonly />
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card shadow-sm">
                            <div class="card-header d-flex justify-content-between align-items-center flex-wrap gap-2">
                                <h4 class="mb-0"><i class="fas fa-map-marked-alt"></i> Beneficiaries Map</h4>
                                <div class="d-flex gap-3 flex-wrap">
                                    <div class="btn-group" role="group">
                                        <input type="radio" class="btn-check" name="layerFilter" id="showNeedies" value="needy" checked>
                                        <label class="btn btn-outline-danger" for="showNeedies"><i class="fas fa-users"></i> Needies</label>
                                        <input type="radio" class="btn-check" name="layerFilter" id="showCharities" value="charity">
                                        <label class="btn btn-outline-success" for="showCharities"><i class="fas fa-heart"></i> Charities</label>
                                        <input type="radio" class="btn-check" name="layerFilter" id="showBoth" value="both">
                                        <label class="btn btn-outline-primary" for="showBoth"><i class="fas fa-globe"></i> Both</label>
                                    </div>
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-outline-info" id="findNearMeBtn" title="Find cases within 10km of your location"><i class="fas fa-location-arrow"></i> Find Near Me</button>
                                        <button type="button" class="btn btn-outline-secondary" id="toggleSketchBtn" title="Select multiple points by drawing a shape"><i class="fas fa-draw-polygon"></i> Multi-Select</button>
                                        <button type="button" class="btn btn-outline-info" id="zoomToAllBtn" title="Zoom to show all visible points"><i class="fas fa-expand-arrows-alt"></i> Zoom to All</button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body p-0">
                                <div id="mapViewDiv" style="height: 500px; width: 100%;"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card shadow-sm">
                            <div class="card-header d-flex justify-content-between align-items-center flex-wrap gap-3">
                                <h4 class="mb-0"><i class="fas fa-table"></i> Beneficiaries List</h4>
                                <div class="d-flex gap-2 flex-wrap align-items-center">
                                    <div class="input-group input-group-sm" style="width: 200px;">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input type="text" id="nameSearch" class="form-control" placeholder="Search by name...">
                                    </div>

                                    <select id="governorateFilter" class="form-select form-select-sm" style="width: 160px;" title="Filter by Governorate">
                                        <option value="">All Governorates</option>
                                    </select>
                                    <select id="roleFilter" class="form-select form-select-sm" style="width: 140px;" title="Filter by Type"></select>
                                    <select id="fieldFilter" class="form-select form-select-sm" style="width: 140px;" title="Filter by Field"></select>

                                    <div class="input-group input-group-sm" style="width: 280px;">
                                        <span class="input-group-text">From</span>
                                        <input type="date" id="creationFromDate" class="form-control" title="Filter by creation date from">
                                        <span class="input-group-text">To</span>
                                        <input type="date" id="creationToDate" class="form-control" title="Filter by creation date to">
                                    </div>

                                    <div class="form-check form-switch" title="Hide beneficiaries whose needs have been met">
                                        <input class="form-check-input" type="checkbox" role="switch" id="hideZeroNeededFilter">
                                        <label class="form-check-label" for="hideZeroNeededFilter">Hide Completed</label>
                                    </div>

                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-primary" id="showAllBtn">Show All</button>
                                        <button type="button" class="btn btn-outline-danger" id="clearSelectionBtn" title="Clear all selections"><i class="fas fa-times"></i> Clear Selections</button>
                                    </div>
                                    <a href="/Donate/ViewDonationHistory" class="btn btn-sm btn-outline-secondary"><i class="fas fa-history"></i> View History</a>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-bordered table-hover align-middle" id="beneficiariesTable">
                                        <thead class="table-light">
                                            <tr>
                                                <th width="5%"><input type="checkbox" id="selectAllCheckbox" title="Select/Deselect All Visible on this page"></th>
                                                <th width="20%" class="sortable-header" data-sort="name" style="cursor: pointer;">Name <i class="sort-icon fas fa-sort"></i></th>
                                                <th width="12%" class="sortable-header" data-sort="creationDate" style="cursor: pointer;">Date Added <i class="sort-icon fas fa-sort"></i></th>
                                                <th width="12%" class="sortable-header" data-sort="neededAmount" style="cursor: pointer;">Needed <i class="sort-icon fas fa-sort"></i></th>
                                                <th width="12%" class="sortable-header" data-sort="userType" style="cursor: pointer;">Type <i class="sort-icon fas fa-sort"></i></th>
                                                <th width="14%">Fields/Sector</th>
                                                <th width="15%">Donate</th>
                                                <th width="10%">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr id="loadingRow"><td colspan="8" class="text-center p-5"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Loading Data...</p></td></tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="card-footer d-flex justify-content-between align-items-center flex-wrap gap-2">
                                <div>
                                    <label for="rowsPerPage" class="form-label me-2 mb-0">Rows per page:</label>
                                    <select id="rowsPerPage" class="form-select form-select-sm d-inline-block" style="width: 75px;">
                                        <option value="10">10</option>
                                        <option value="25" selected>25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                </div>
                                <div id="paginationInfo" class="text-muted"></div>
                                <div class="btn-group">
                                    <button class="btn btn-outline-secondary btn-sm" id="prevPageBtn" disabled><i class="fas fa-arrow-left"></i> Previous</button>
                                    <button class="btn btn-outline-secondary btn-sm" id="nextPageBtn" disabled>Next <i class="fas fa-arrow-right"></i></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card shadow-sm border-primary">
                            <div class="card-header bg-primary text-white">
                                <h4 class="mb-0"><i class="fas fa-clipboard-list"></i> Donation Summary</h4>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped" id="donationSummary">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Type</th>
                                                <th>Amount</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mt-3">
                                    <div>
                                        <h5 class="mb-0">Total Donations: <span id="totalDonationsAmount" class="text-success fw-bold">$0.00</span></h5>
                                    </div>
                                    <div>
                                        <button class="btn btn-primary btn-lg" id="submitAllBtn" disabled>
                                            <i class="fas fa-paper-plane"></i> Submit All Donations
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://js.arcgis.com/4.29/"></script>
    <link rel="stylesheet" href="https://js.arcgis.com/4.29/esri/themes/light/main.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <script>
        $(document).ready(function () {
            let donations = [], mapView, neediesLayer, charitiesLayer, sketchViewModel, governorateLayer;
            let highlightHandles = [];
            let selectedFeatures = new Map();
            let isSketchActive = false;
            let allBeneficiaries = [];
            let filteredBeneficiaries = [];
            let currentPage = 1;
            let rowsPerPage = 25;
            let governorates = {};
            let nearMeFilterGeometry = null;
            let userLocationGraphic = null;
            let runtimeGraphicsLayer;
            let Graphic, Point, geometryEngine, Extent, projection;
            let isSelectionModeActive = false;
            let currentSortColumn = 'default';
            let currentSortDirection = 'asc';
            let aiAmountFilter = null;
            let searchTimeout = null;

            // Get values from Controller
            const NEEDIES_SERVICE_URL = "@ViewData["NeediesUrl"]";
            const CHARITIES_SERVICE_URL = "@ViewData["CharitiesUrl"]";
            const GOVERNORATES_SERVICE_URL = "@ViewData["GovernoratesUrl"]";
            const DONORS_SERVICE_URL = "@ViewData["DonorsUrl"]";
            const DONATIONS_LAYER_URL = "@ViewData["DonationsLayerUrl"]";
            const NEEDY_COLOR = "@ViewData["NeedyColor"]";
            const CHARITY_COLOR = "@ViewData["CharityColor"]";
            const BufferArea = @ViewData["BufferArea"];
            const EgyptExtent = @Html.Raw(Json.Serialize(ViewData["EgyptExtent"]));

            initializeChat();
            initializeMap();
            bindEvents();

            function bindEvents() {
                $(document).on("input", "#TotalDonation", updateRemaining);
                $(document).on("click", ".donate-btn", handleDonateClick);
                $(document).on("click", ".remove-donation-btn", handleRemoveDonation);
                $('#submitAllBtn').on("click", submitAllDonations);

                $('#nameSearch').on('keyup', function() {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        isSelectionModeActive = false;
                        performFilteringAsync();
                    }, 300);
                });

                $('#governorateFilter, #roleFilter, #fieldFilter, #hideZeroNeededFilter, input[name="layerFilter"], #creationFromDate, #creationToDate').on('change', () => {
                    isSelectionModeActive = false;
                    performFilteringAsync();
                });

                $('#showAllBtn').on('click', function () {
                    clearAllFilters(true);
                });

                $('#rowsPerPage').on('change', function () {
                    rowsPerPage = parseInt($(this).val(), 10);
                    currentPage = 1;
                    renderTablePage();
                });

                $('#prevPageBtn').on('click', () => { if (currentPage > 1) { currentPage--; renderTablePage(); } });
                $('#nextPageBtn').on('click', () => {
                    const totalPages = Math.ceil(filteredBeneficiaries.length / rowsPerPage);
                    if (currentPage < totalPages) { currentPage++; renderTablePage(); }
                });

                $('#toggleSketchBtn').on('click', () => toggleSketchMode(!isSketchActive));
                $('#clearSelectionBtn').on('click', clearAllSelections);
                $('#zoomToAllBtn').on('click', zoomToAll);
                $('#selectAllCheckbox').on('change', handleSelectAll);
                $(document).on('change', '.row-checkbox', handleRowCheckboxChange);
                $('#findNearMeBtn').on('click', findNearMe);
                $('#beneficiariesTable').on('click', '.sortable-header', handleSortClick);
                $('#beneficiariesTable').on('click', '.btn-zoom-to', handleZoomToClick);

                // AI Chat Events
                $('#ai-chat-toggle').on('click', () => $('#ai-chat-window').fadeToggle());
                $('#ai-chat-close').on('click', () => $('#ai-chat-window').fadeOut());
                $('#ai-chat-form').on('submit', handleAiSearch);
                $(document).on('click', '.suggestion-btn', function() {
                    $('#ai-chat-input').val($(this).data('suggestion'));
                    $('#ai-chat-form').submit();
                });
            }

            // ✅ Updated clear filters function
            function clearAllFilters(shouldZoom = true) {
                $('#nameSearch, #governorateFilter, #roleFilter, #fieldFilter, #creationFromDate, #creationToDate').val('');
                $('#hideZeroNeededFilter').prop('checked', false);
                $('input[name="layerFilter"][value="both"]').prop('checked', true);
                aiAmountFilter = null;
                nearMeFilterGeometry = null;
                currentSortColumn = 'default';
                currentSortDirection = 'asc';

                // Clear location and graphics
                if (userLocationGraphic && runtimeGraphicsLayer) {
                    runtimeGraphicsLayer.removeAll(); // Clear all graphics including buffer
                    userLocationGraphic = null;
                }

                // Reset "Find Near Me" button
                $('#findNearMeBtn')
                    .removeClass('btn-info')
                    .addClass('btn-outline-info')
                    .html('<i class="fas fa-location-arrow"></i> Find Near Me');

                isSelectionModeActive = false;

                if (shouldZoom) {
                    performFilteringAsync();
                    zoomToAll();
                }
            }

            function initializeMap() {
                require([
                    "esri/Map", "esri/views/MapView", "esri/layers/FeatureLayer",
                    "esri/layers/GraphicsLayer", "esri/widgets/Sketch/SketchViewModel",
                    "esri/renderers/SimpleRenderer", "esri/symbols/SimpleMarkerSymbol",
                    "esri/geometry/Extent", "esri/geometry/geometryEngine", "esri/geometry/projection",
                    "esri/Graphic", "esri/geometry/Point"
                ], function (Map, MapView, FeatureLayer, GraphicsLayer, SketchViewModel, SimpleRenderer, SimpleMarkerSymbol, esriExtent, esriGeometryEngine, esriProjection, esriGraphic, esriPoint) {
                    geometryEngine = esriGeometryEngine;
                    Graphic = esriGraphic;
                    Point = esriPoint;
                    Extent = esriExtent;
                    projection = esriProjection;

                    const map = new Map({ basemap: "streets-navigation-vector" });
                    mapView = new MapView({
                        container: "mapViewDiv",
                        map: map,
                        center: [31.2357, 30.0444],
                        zoom: 6,
                        popup: {
                            dockEnabled: true,
                            dockOptions: { breakpoint: false, position: "top-right" }
                        },
                        highlightOptions: {
                            color: [255, 255, 0, 1],
                            haloOpacity: 0.9,
                            fillOpacity: 0.4
                        }
                    });

                    const createBeneficiaryRenderer = (color) => new SimpleRenderer({
                        symbol: new SimpleMarkerSymbol({
                            style: "circle",
                            color: color,
                            outline: { color: "white", width: 1 }
                        }),
                        visualVariables: [{
                            type: "size",
                            field: "how_much_do_you_need",
                            stops: [
                                { value: 100, size: "8px" },
                                { value: 5000, size: "16px" },
                                { value: 50000, size: "32px" }
                            ]
                        }]
                    });

                    const createClusterConfig = (popupTitle) => ({
                        type: "cluster",
                        clusterRadius: "80px",
                        popupTemplate: {
                            title: `Cluster of ${popupTitle}`,
                            content: "This cluster represents {cluster_count} beneficiaries."
                        },
                        clusterMinSize: "24px",
                        clusterMaxSize: "60px",
                        labelingInfo: [{
                            labelExpressionInfo: {
                                expression: "Text($feature.cluster_count, '#,###')"
                            },
                            symbol: {
                                type: "text",
                                color: "#ffffff",
                                font: { weight: "bold", size: "12px" }
                            },
                            labelPlacement: "center-center"
                        }]
                    });

                    neediesLayer = new FeatureLayer({
                        url: NEEDIES_SERVICE_URL,
                        title: "Needies",
                        outFields: ["*"],
                        popupTemplate: createPopupTemplate('needy'),
                        renderer: createBeneficiaryRenderer(NEEDY_COLOR),
                        featureReduction: createClusterConfig("Needies")
                    });

                    charitiesLayer = new FeatureLayer({
                        url: CHARITIES_SERVICE_URL,
                        title: "Charities",
                        outFields: ["*"],
                        popupTemplate: createPopupTemplate('charity'),
                        renderer: createBeneficiaryRenderer(CHARITY_COLOR),
                        featureReduction: createClusterConfig("Charities")
                    });

                    governorateLayer = new FeatureLayer({
                        url: GOVERNORATES_SERVICE_URL,
                        opacity: 0.15,
                        renderer: {
                            type: "simple",
                            symbol: {
                                type: "simple-fill",
                                style: "none",
                                outline: { color: "#4e4e4e", width: 1 }
                            }
                        },
                        labelingInfo: []
                    });

                    const sketchLayer = new GraphicsLayer();
                    runtimeGraphicsLayer = new GraphicsLayer();

                    map.addMany([governorateLayer, neediesLayer, charitiesLayer, sketchLayer, runtimeGraphicsLayer]);

                    sketchViewModel = new SketchViewModel({
                        view: mapView,
                        layer: sketchLayer,
                        polygonSymbol: {
                            type: "simple-fill",
                            color: [51, 51, 204, 0.2],
                            outline: { color: "#3333cc", width: 2 }
                        }
                    });

                    mapView.on("click", handleMapClick);
                    sketchViewModel.on("create", handleSketchCreate);
                    loadAndProcessAllData();
                });
            }

            // ✅ Load data function with debugging
            function loadAndProcessAllData() {
                showLoadingIndicator(true, "Performing Spatial Analysis & Loading Data...");
                const govPromise = governorateLayer.queryFeatures({ where: "1=1", outFields: ["name"], returnGeometry: true });
                const neediesPromise = neediesLayer.queryFeatures({ where: "1=1", outFields: ["*"], returnGeometry: true });
                const charitiesPromise = charitiesLayer.queryFeatures({ where: "1=1", outFields: ["*"], returnGeometry: true });

                Promise.all([govPromise, neediesPromise, charitiesPromise])
                    .then(([govResults, neediesResults, charitiesResults]) => {
                        populateGovernorateFilter(govResults.features);
                        let rawBeneficiaries = [...neediesResults.features, ...charitiesResults.features];
                        allBeneficiaries = rawBeneficiaries.map(feature => {
                            const containingGov = govResults.features.find(govFeature => geometryEngine.contains(govFeature.geometry, feature.geometry));
                            const layerType = feature.layer.title === 'Needies' ? 'needy' : 'charity';
                            const processed = processFeature(feature, layerType);
                            processed.governorate = containingGov ? containingGov.attributes.name : 'N/A';
                            return processed;
                        });
                        populateFilters();
                        performFilteringAsync();

                        // ✅ Add debugging info
                        setTimeout(() => {
                            debugGovernoratesInfo();
                        }, 1000);
                    })
                    .catch(handleDataLoadError)
                    .finally(() => showLoadingIndicator(false));
            }

            // ✅ Debugging function for governorates
            function debugGovernoratesInfo() {
                console.log("🏛️ Available governorates in data:");
                const govSet = new Set();
                allBeneficiaries.forEach(b => {
                    if (b.governorate && b.governorate !== 'N/A') {
                        govSet.add(b.governorate);
                    }
                });

                console.log("📊 Unique governorates in beneficiaries:", Array.from(govSet).sort());

                console.log("📋 Governorates in dropdown:");
                $('#governorateFilter option').each(function() {
                    if ($(this).val()) {
                        console.log(`  "${$(this).val()}" -> "${$(this).text()}"`);
                    }
                });
            }

            function processFeature(feature, layerType) {
                const attrs = feature.attributes;
                const isCharity = layerType === 'charity';
                return {
                    id: `${layerType}_${attrs.objectid}`,
                    name: isCharity ? attrs.charity_name : attrs.full_name,
                    neededAmount: attrs.how_much_do_you_need || 0,
                    userType: isCharity ? 'Charity' : 'Needy',
                    helpFields: isCharity ? (attrs.charity_sector || 'General').split(/[,;]/).map(s => s.trim()) : [attrs.type_of_need || 'General'],
                    email: isCharity ? attrs.enter_your_e_mail : attrs.email,
                    creationDate: attrs.CreationDate || 0,
                    layerType: layerType,
                    objectId: attrs.objectid,
                    governorate: 'N/A',
                    geometry: feature.geometry
                };
            }

            function getAttributeFilters() {
                return {
                    name: $('#nameSearch').val().toLowerCase().trim(),
                    role: $('#roleFilter').val(),
                    field: $('#fieldFilter').val(),
                    hideZero: $('#hideZeroNeededFilter').prop('checked'),
                    layerType: $('input[name="layerFilter"]:checked').val(),
                    fromDate: $('#creationFromDate').val(),
                    toDate: $('#creationToDate').val(),
                    aiAmount: aiAmountFilter
                };
            }

            // ✅ Attribute matching function with debugging
            function checkAttributeMatch(beneficiary, filters) {
                const nameMatch = !filters.name || beneficiary.name.toLowerCase().includes(filters.name);
                const layerMatch = filters.layerType === 'both' || beneficiary.layerType === filters.layerType;
                const zeroMatch = !filters.hideZero || beneficiary.neededAmount > 0;
                const roleMatch = !filters.role || beneficiary.userType === filters.role;
                const fieldMatch = !filters.field || beneficiary.helpFields.some(f => f.trim() === filters.field);
                const fromDateMatch = !filters.fromDate || (beneficiary.creationDate && beneficiary.creationDate >= new Date(filters.fromDate).getTime());
                const toDateMatch = !filters.toDate || (beneficiary.creationDate && beneficiary.creationDate <= new Date(filters.toDate).setHours(23, 59, 59, 999));

                // Check numerical filters from AI
                let amountMatch = true;
                if(filters.aiAmount) {
                    if (filters.aiAmount.less_than !== undefined && beneficiary.neededAmount >= filters.aiAmount.less_than) {
                        amountMatch = false;
                    }
                    if (filters.aiAmount.greater_than !== undefined && beneficiary.neededAmount <= filters.aiAmount.greater_than) {
                        amountMatch = false;
                    }
                }

                // Add governorate check with debugging
                let governorateMatch = true;
                const selectedGovernorate = $('#governorateFilter').val();
                if (selectedGovernorate) {
                    governorateMatch = beneficiary.governorate === selectedGovernorate;

                    // debugging for governorates
                    if (!governorateMatch && Math.random() < 0.01) { // print 1% of results only
                        console.log(`🏛️ Governorate mismatch: "${beneficiary.governorate}" vs selected "${selectedGovernorate}"`);
                    }
                }

                return nameMatch && layerMatch && zeroMatch && roleMatch && fieldMatch && fromDateMatch && toDateMatch && amountMatch && governorateMatch;
            }

            // ✅ Filtering function with detailed debugging
            function performFilteringAsync() {
                showLoadingIndicator(true, "Applying filters...");
                setTimeout(() => {
                    updateLayerVisibility();

                    // Print applied filters
                    const attributeFilters = getAttributeFilters();
                    console.log("🔍 Applied filters:", attributeFilters);
                    console.log("📊 Total beneficiaries:", allBeneficiaries.length);

                    let results = [];
                    if (isSelectionModeActive) {
                        results = Array.from(selectedFeatures.values());
                    } else {
                        const spatialFilter = getCombinedSpatialFilter();
                        applyMapLayerFilter(spatialFilter);

                        // Print spatial filter information
                        if (spatialFilter) {
                            console.log("🗺️ Spatial filter applied");
                        } else {
                            console.log("🗺️ No spatial filter");
                        }

                        let spatialMatches = 0;
                        let attributeMatches = 0;
                        let finalMatches = 0;

                        for (const beneficiary of allBeneficiaries) {
                            const attributeMatch = checkAttributeMatch(beneficiary, attributeFilters);
                            const spatialMatch = !spatialFilter || (beneficiary.geometry && geometryEngine.contains(spatialFilter, beneficiary.geometry));

                            if (attributeMatch) attributeMatches++;
                            if (spatialMatch) spatialMatches++;

                            if (attributeMatch && spatialMatch) {
                                results.push(beneficiary);
                                finalMatches++;
                            }
                        }

                        console.log(`📈 Filter results: ${attributeMatches} attribute matches, ${spatialMatches} spatial matches, ${finalMatches} final matches`);
                    }

                    if (currentSortColumn !== 'default') {
                        results.sort((a, b) => {
                            const valA = a[currentSortColumn];
                            const valB = b[currentSortColumn];
                            let comparison = 0;
                            if (valA > valB) { comparison = 1; }
                            else if (valA < valB) { comparison = -1; }
                            return currentSortDirection === 'asc' ? comparison : -comparison;
                        });
                    }

                    filteredBeneficiaries = results;
                    updateSortIcons();
                    currentPage = 1;
                    renderTablePage();
                    highlightSelection();
                    showLoadingIndicator(false);
                }, 50);
            }

            function getCombinedSpatialFilter() {
                let spatialGeometry = null;
                const govFilter = $('#governorateFilter').val();
                if (govFilter && governorates[govFilter]) {
                    spatialGeometry = governorates[govFilter].geometry;
                }
                if (nearMeFilterGeometry) {
                    spatialGeometry = spatialGeometry ? geometryEngine.intersect(spatialGeometry, nearMeFilterGeometry) : nearMeFilterGeometry;
                }
                return spatialGeometry;
            }

            function applyMapLayerFilter(geometry) {
                const filter = geometry ? { geometry } : null;
                if (neediesLayer) neediesLayer.filter = filter;
                if (charitiesLayer) charitiesLayer.filter = filter;
            }

            function populateGovernorateFilter(govFeatures) {
                const select = $('#governorateFilter');
                govFeatures.map(feature => feature.attributes.name).sort().forEach(govName => {
                    governorates[govName] = { geometry: govFeatures.find(f => f.attributes.name === govName).geometry };
                    select.append(`<option value="${govName}">${govName}</option>`);
                });
            }

            function populateFilters() {
                const allTypes = [...new Set(allBeneficiaries.map(b => b.userType))],
                      allFields = [...new Set(allBeneficiaries.flatMap(b => b.helpFields.map(f => f.trim())))].sort();
                $('#roleFilter').html('<option value="">All Types</option>' + allTypes.map(r => `<option value="${r}">${r}</option>`).join(''));
                $('#fieldFilter').html('<option value="">All Fields</option>' + allFields.map(f => `<option value="${f}">${f}</option>`).join(''));
            }

            function renderTablePage() {
                const tbody = $("#beneficiariesTable tbody");
                tbody.empty();
                updatePaginationControls(filteredBeneficiaries.length);
                if (filteredBeneficiaries.length === 0) {
                    tbody.html('<tr><td colspan="8" class="text-center p-5">No matching beneficiaries found.</td></tr>');
                    return;
                }
                const startIndex = (currentPage - 1) * rowsPerPage;
                const pageItems = filteredBeneficiaries.slice(startIndex, startIndex + rowsPerPage);
                pageItems.forEach(b => {
                    const fieldsHtml = b.helpFields.map(field => `<span class="badge bg-info text-dark me-1">${field.trim()}</span>`).join('');
                    const typeBadgeColor = b.userType === 'Charity' ? CHARITY_COLOR : NEEDY_COLOR;
                    const beneficiaryData = JSON.stringify(b, (key, value) => key === 'geometry' ? undefined : value);
                    tbody.append(
                        `<tr data-id="${b.id}" class="beneficiary-row">
                            <td><input type="checkbox" class="form-check-input row-checkbox" data-id="${b.id}"></td>
                            <td class="fw-semibold">${b.name}</td>
                            <td>${formatDate(b.creationDate)}</td>
                            <td class="text-end fw-bold text-danger">${formatCurrency(b.neededAmount)}</td>
                            <td><span class="badge text-white" style="background-color: ${typeBadgeColor}; font-size: 1.1em; padding: 0.4em 0.6em;">${b.userType}</span></td>
                            <td>${fieldsHtml}</td>
                            <td>
                                <div class="input-group input-group-sm">
                                    <input type="number" class="form-control donate-amount" min="1" max="${b.neededAmount || 1}" placeholder="Amount" />
                                    <button type="button" class="btn btn-success donate-btn" data-beneficiary='${beneficiaryData}'><i class="fas fa-heart"></i></button>
                                </div>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-info btn-zoom-to" title="Zoom to case on map"><i class="fas fa-search-location"></i></button>
                            </td>
                        </tr>`);
                });
                updateTableSelectionVisuals();
            }

            function updatePaginationControls(totalRows) {
                const totalPages = Math.ceil(totalRows / rowsPerPage);
                const paginationFooter = $('#paginationInfo').closest('.card-footer');
                if (totalPages <= 1) { paginationFooter.hide(); return; }
                paginationFooter.show();
                $('#prevPageBtn').prop('disabled', currentPage === 1);
                $('#nextPageBtn').prop('disabled', currentPage === totalPages);
                const startRecord = (currentPage - 1) * rowsPerPage + 1;
                const endRecord = Math.min(startRecord + rowsPerPage - 1, totalRows);
                $('#paginationInfo').text(`Showing ${startRecord} - ${endRecord} of ${totalRows}`);
            }

            function formatDate(timestamp) {
                if (!timestamp || timestamp === 0) return 'N/A';
                const d = new Date(timestamp);
                const datePart = d.toISOString().split('T')[0];
                const timePart = d.toTimeString().split(' ')[0];
                return `${datePart}<br><small class="text-muted">${timePart}</small>`;
            }

            function formatCurrency(value) { return (value || 0).toLocaleString("en-US", { style: "currency", currency: "USD" }); }

            function createPopupTemplate(type) {
                const isNeedy = "needy" === type;
                const title = isNeedy ? "{full_name}" : "{charity_name}";
                const typeField = isNeedy ? "type_of_need" : "charity_sector";
                const amountField = "how_much_do_you_need";
                const creationDateField = "CreationDate";
                return {
                    title: title,
                    content: [{
                        type: "fields",
                        fieldInfos: [
                            { fieldName: typeField, label: isNeedy ? "Need Type" : "Sector" },
                            { fieldName: amountField, label: "Amount Needed", format: { digitSeparator: true, places: 2 } },
                            { fieldName: creationDateField, label: "Date Added", format: { dateFormat: "long-date-short-time" } }
                        ]
                    }]
                };
            }

            function showLoadingIndicator(show, message = "Loading Data...") {
                const placeholder = `<tr><td colspan="8" class="text-center p-5"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">${message}</p></td></tr>`;
                if (show) {
                    $('#beneficiariesTable tbody').html(placeholder);
                } else {
                    if ($('#beneficiariesTable tbody').find('.spinner-border').length > 0) {
                        $('#beneficiariesTable tbody').empty();
                    }
                }
            }

            function handleDataLoadError(error) {
                console.error("Error during data load or analysis:", error);
                const errorMsg = 'Failed to load or process data. Please check network connection and service status.';
                $('#beneficiariesTable tbody').html(`<tr><td colspan="8" class="text-center text-danger p-5">${errorMsg}</td></tr>`);
            }

            function zoomToAll() {
                if (Extent) {
                    const egyptExtent = new Extent({ xmin: 25.0, ymin: 22.0, xmax: 36.0, ymax: 32.0, spatialReference: { wkid: 4326 } });
                    if (mapView) { mapView.goTo(egyptExtent); }
                }
            }

            function handleMapClick(event) {
                if (isSketchActive) return;
                mapView.hitTest(event).then(response => {
                    const graphicResult = response.results.find(r => r.graphic && (r.graphic.layer || r.graphic.isAggregate));
                    if (!graphicResult) return;
                    const graphic = graphicResult.graphic;
                    if (graphic.isAggregate) { mapView.goTo({ target: graphic.geometry, zoom: mapView.zoom + 2 }); return; }
                    if (graphic.layer && graphic.layer.visible && (graphic.layer.title === "Needies" || graphic.layer.title === "Charities")) {
                        const layerType = graphic.layer.title === 'Needies' ? 'needy' : 'charity';
                        toggleFeatureSelection(`${layerType}_${graphic.attributes.objectid}`);
                    }
                });
            }

            function handleSortClick() {
                const column = $(this).data('sort');
                if (currentSortColumn === column) {
                    currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSortColumn = column;
                    currentSortDirection = 'asc';
                }
                performFilteringAsync();
            }

            function handleZoomToClick(e) {
                e.stopPropagation();
                const beneficiaryId = $(this).closest('tr').data('id');
                const beneficiary = allBeneficiaries.find(b => b.id === beneficiaryId);
                if (beneficiary && beneficiary.geometry) {
                    mapView.goTo({
                        target: beneficiary.geometry,
                        zoom: 15
                    }).then(() => {
                        mapView.graphics.add(new Graphic({
                            geometry: beneficiary.geometry,
                            symbol: {
                                type: "simple-marker", style: "circle", color: [255, 255, 0, 0.5],
                                size: 20, outline: null
                            }
                        }));
                        setTimeout(() => mapView.graphics.removeAll(), 1000);
                    });
                }
            }

            function updateSortIcons() {
                $('#beneficiariesTable .sort-icon').removeClass('fa-sort-up fa-sort-down').addClass('fa-sort');
                if (currentSortColumn !== 'default') {
                    const iconClass = currentSortDirection === 'asc' ? 'fa-sort-up' : 'fa-sort-down';
                    $(`th[data-sort="${currentSortColumn}"] .sort-icon`).removeClass('fa-sort').addClass(iconClass);
                }
            }

            // ✅ Enhanced findNearMe function with 10km circle rendering
            function findNearMe() {
                if (!navigator.geolocation) {
                    alert("Geolocation is not supported by this browser.");
                    return;
                }
                if (!geometryEngine || !Point || !Graphic || !projection) {
                    alert("Mapping components are not ready yet. Please try again in a moment.");
                    return;
                }

                showLoadingIndicator(true, "Getting your location...");
                const options = { enableHighAccuracy: true, timeout: 15000, maximumAge: 60000 };
                navigator.geolocation.getCurrentPosition(handleLocationSuccess, handleLocationError, options);
            }

            async function handleLocationSuccess(position) {
                try {
                    const coords = position.coords;
                    const userPoint = new Point({
                        longitude: coords.longitude,
                        latitude: coords.latitude,
                        spatialReference: { wkid: 4326 }
                    });

                    if (!projection.isLoaded()) {
                        await projection.load();
                    }

                    const projectedPoint = projection.project(userPoint, { wkid: 3857 });
                    const bufferIn3857 = geometryEngine.buffer(projectedPoint, BufferArea, "kilometers");
                    nearMeFilterGeometry = projection.project(bufferIn3857, { wkid: 4326 });

                    if (userLocationGraphic) {
                        runtimeGraphicsLayer.removeAll();
                    }

                    // Add user location marker
                    userLocationGraphic = new Graphic({
                        geometry: userPoint,
                        symbol: {
                            type: "simple-marker",
                            style: "circle",
                            color: "#ff4444",
                            size: "16px",
                            outline: { color: [255, 255, 255], width: 3 }
                        }
                    });
                    runtimeGraphicsLayer.add(userLocationGraphic);

                    // Add circle symbol for illustration
                    const bufferGraphic = new Graphic({
                        geometry: nearMeFilterGeometry,
                        symbol: {
                            type: "simple-fill",
                            color: [0, 123, 255, 0.1],
                            outline: { color: [0, 123, 255, 0.8], width: 2 }
                        }
                    });
                    runtimeGraphicsLayer.add(bufferGraphic);

                    mapView.goTo({
                        target: bufferIn3857.extent.expand(1.5),
                        duration: 1000
                    });

                    // Update UI
                    updateNearMeStatus(true, coords);
                    performFilteringAsync();

                    console.log(`Location found: ${coords.latitude}, ${coords.longitude} (accuracy: ${coords.accuracy}m)`);

                } catch (e) {
                    console.error("Error in handleLocationSuccess:", e);
                    alert("An error occurred while processing your location. Please try again.");
                } finally {
                    showLoadingIndicator(false);
                }
            }

            function handleLocationError(error) {
                showLoadingIndicator(false);

                let message = "An unknown error occurred.";
                let suggestion = "";

                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        message = "Location access was denied.";
                        suggestion = "Please allow location access in your browser settings.";
                        break;
                    case error.POSITION_UNAVAILABLE:
                        message = "Location information is unavailable.";
                        suggestion = "Please ensure GPS or location services are enabled.";
                        break;
                    case error.TIMEOUT:
                        message = "Location request timed out.";
                        suggestion = "Please check your internet connection and try again.";
                        break;
                }

                alert(`Location error: ${message}\n${suggestion}`);

                if ($('#ai-chat-window').is(':visible')) {
                    $('#ai-chat-messages').append(`
                        <div class="ai-message error">
                            <i class="fas fa-location-arrow me-2"></i>
                            <strong>Location Error</strong><br>
                            ${message} ${suggestion}
                            <div class="mt-2">
                                <button type="button" class="suggestion-btn btn btn-outline-primary btn-sm"
                                        onclick="findNearMe()">🔄 Try Again</button>
                            </div>
                        </div>
                    `);
                    scrollToBottom();
                }
            }

            function updateNearMeStatus(success, coords = null) {
                if (!success) return;

                $('#findNearMeBtn')
                    .removeClass('btn-outline-info')
                    .addClass('btn-info')
                    .html('<i class="fas fa-check-circle"></i> Location Found');

                if ($('#ai-chat-window').is(':visible')) {
                    $('#ai-chat-messages').append(`
                        <div class="ai-message success">
                            <i class="fas fa-map-marker-alt me-2"></i>
                            <strong>Location Found!</strong><br>
                            Searching for cases within 10km of your location...
                            <small class="d-block mt-1 text-muted">
                                Accuracy: ${coords ? Math.round(coords.accuracy) + 'm' : 'Unknown'}
                            </small>
                        </div>
                    `);
                    scrollToBottom();
                }
            }

            function toggleFeatureSelection(id) {
                const beneficiary = allBeneficiaries.find(b => b.id === id);
                if (!beneficiary) return;
                if (selectedFeatures.has(id)) {
                    selectedFeatures.delete(id);
                } else {
                    selectedFeatures.set(id, beneficiary);
                }
                updateSelectionCount();
                updateTableSelectionVisuals();
                highlightSelection();
            }

            function clearAllSelections() {
                selectedFeatures.clear();
                if (sketchViewModel) sketchViewModel.layer.removeAll();
                if (runtimeGraphicsLayer) runtimeGraphicsLayer.removeAll();
                isSelectionModeActive = false;
                performFilteringAsync();
                highlightSelection();
            }

            function highlightSelection() {
                if (highlightHandles) { highlightHandles.forEach(h => h.remove()); }
                highlightHandles = [];
                if (selectedFeatures.size === 0) return;
                const idsByType = { needy: [], charity: [] };
                selectedFeatures.forEach(b => idsByType[b.layerType].push(b.objectId));
                if (idsByType.needy.length > 0 && neediesLayer.visible) {
                    mapView.whenLayerView(neediesLayer).then(lv => { if (lv) highlightHandles.push(lv.highlight(idsByType.needy)); });
                }
                if (idsByType.charity.length > 0 && charitiesLayer.visible) {
                    mapView.whenLayerView(charitiesLayer).then(lv => { if (lv) highlightHandles.push(lv.highlight(idsByType.charity)); });
                }
            }

            function handleRowCheckboxChange() { toggleFeatureSelection($(this).data("id")); }

            function handleSketchCreate(event) {
                if ("complete" === event.state) {
                    const geometry = event.graphic.geometry;
                    sketchViewModel.layer.removeAll();
                    toggleSketchMode(false);
                    showLoadingIndicator(true, "Finding beneficiaries in selection...");
                    const layersToQuery = getVisibleLayers();
                    const queryPromises = layersToQuery.map(layer => layer.queryFeatures({ geometry: geometry, spatialRelationship: "intersects", outFields: ["*"], returnGeometry: true }));
                    Promise.all(queryPromises).then(results => {
                        selectedFeatures.clear();
                        results.forEach(featureSet => {
                            featureSet.features.forEach(feature => {
                                const processed = allBeneficiaries.find(b => b.objectId === feature.attributes.objectid && b.layerType === (feature.layer.title === 'Needies' ? 'needy' : 'charity'));
                                if (processed) { selectedFeatures.set(processed.id, processed); }
                            });
                        });
                        isSelectionModeActive = true;
                        performFilteringAsync();
                        highlightSelection();
                    }).catch(err => { console.error("Sketch query error:", err); showLoadingIndicator(false); });
                }
            }

            function handleSelectAll() {
                const isChecked = $(this).prop("checked");
                $("#beneficiariesTable tbody tr:visible .row-checkbox").each(function () {
                    const id = $(this).data("id");
                    const beneficiary = filteredBeneficiaries.find(b => b.id === id);
                    if (beneficiary) {
                        if (isChecked) {
                            if (!selectedFeatures.has(id)) selectedFeatures.set(id, beneficiary);
                        } else {
                            if (selectedFeatures.has(id)) selectedFeatures.delete(id);
                        }
                    }
                });
                updateSelectionCount();
                updateTableSelectionVisuals();
                highlightSelection();
            }

            function submitAllDonations() {
                if (donations.length !== 0) {
                    const dataToSubmit = donations.map(d => ({ Type: d.id.split("_")[0], BeneficiaryId: parseInt(d.id.split("_")[1]), Amount: d.amount }));
                    $("#submitAllBtn").prop("disabled", true).html('<div class="spinner-border spinner-border-sm"></div> Submitting...');
                    $.ajax({
                        url: "/Donate/SubmitDonations", type: "POST", contentType: "application/json", data: JSON.stringify(dataToSubmit),
                        success: res => {
                            if (res.success) {
                                alert("Donations recorded successfully!");
                                location.reload();
                            } else {
                                alert("An error occurred: " + (res.message || "Unknown error"));
                                $("#submitAllBtn").prop("disabled", false).html('<i class="fas fa-paper-plane"></i> Submit All Donations');
                            }
                        },
                        error: xhr => {
                            alert("A server error occurred!");
                            console.error(xhr.responseText);
                            $("#submitAllBtn").prop("disabled", false).html('<i class="fas fa-paper-plane"></i> Submit All Donations');
                        }
                    });
                }
            }

            function handleDonateClick() {
                const beneficiaryJson = $(this).attr("data-beneficiary");
                const beneficiary = JSON.parse(beneficiaryJson);
                const input = $(this).closest("tr").find(".donate-amount");
                const amount = parseFloat(input.val());
                const total = parseFloat($("#TotalDonation").val()) || 0;
                const used = donations.reduce((sum, d) => sum + d.amount, 0);
                if (!amount || amount < 1 || amount > (total - used)) {
                    alert(`Invalid amount. Please enter a value between 1 and the remaining balance of ${formatCurrency(total - used)}.`);
                    input.addClass("is-invalid").focus(); return;
                }
                if (beneficiary.neededAmount > 0 && amount > beneficiary.neededAmount) {
                    alert(`Donation cannot exceed the needed amount of ${formatCurrency(beneficiary.neededAmount)}.`);
                    input.addClass("is-invalid").focus(); return;
                }
                if (donations.some(d => d.id === beneficiary.id)) {
                    alert("You have already added a donation for this beneficiary."); return;
                }
                input.removeClass("is-invalid");
                donations.push({ id: beneficiary.id, name: beneficiary.name, userType: beneficiary.userType, amount: amount });
                $(this).prop("disabled", true).html('<i class="fas fa-check"></i> Added');
                input.prop("disabled", true);
                updateSummary();
            }

            function handleRemoveDonation() {
                const idToRemove = $(this).data("id");
                donations = donations.filter(d => d.id !== idToRemove);
                const row = $(`tr[data-id="${idToRemove}"]`);
                row.find(".donate-btn").prop("disabled", false).html('<i class="fas fa-heart"></i>');
                row.find(".donate-amount").prop("disabled", false);
                updateSummary();
            }

            function updateSummary() {
                const tbody = $("#donationSummary tbody");
                tbody.empty();
                if (donations.length === 0) {
                    tbody.html('<tr><td colspan="4" class="text-center text-muted">No donations added yet.</td></tr>');
                } else {
                    donations.forEach(d => tbody.append(`<tr><td>${d.name}</td><td>${d.userType}</td><td>${formatCurrency(d.amount)}</td><td><button class="btn btn-sm btn-outline-danger remove-donation-btn" data-id="${d.id}"><i class="fas fa-trash"></i></button></td></tr>`));
                }
                $('#totalDonationsAmount').text(formatCurrency(donations.reduce((sum, d) => sum + d.amount, 0)));
                updateRemaining();
            }

            function updateTableSelectionVisuals() {
                $(".row-checkbox").each(function () {
                    $(this).prop("checked", selectedFeatures.has($(this).data("id")));
                    $(this).closest("tr").toggleClass("table-info", selectedFeatures.has($(this).data("id")));
                });
                updateSelectAllCheckboxState();
            }

            function updateSelectionCount() { }

            function updateSelectAllCheckboxState() {
                const allVisibleChecks = $("#beneficiariesTable tbody .row-checkbox");
                const allVisibleChecked = allVisibleChecks.filter(":checked");
                const selectAll = $("#selectAllCheckbox");
                selectAll.prop("checked", allVisibleChecks.length > 0 && allVisibleChecks.length === allVisibleChecked.length);
                selectAll.prop("indeterminate", allVisibleChecked.length > 0 && allVisibleChecked.length < allVisibleChecks.length);
            }

            function updateRemaining() {
                const total = parseFloat($("#TotalDonation").val()) || 0;
                const used = donations.reduce((sum, d) => sum + d.amount, 0);
                $("#RemainingBalance").val((total - used).toFixed(2));
                $("#submitAllBtn").prop("disabled", donations.length === 0 || (total - used) < 0 || total === 0);
            }

            function toggleSketchMode(active) {
                isSketchActive = active;
                const btn = $("#toggleSketchBtn");
                if (active) {
                    btn.removeClass("btn-outline-secondary").addClass("btn-warning").html('<i class="fas fa-times"></i> Cancel');
                    sketchViewModel.create("polygon");
                } else {
                    sketchViewModel.cancel();
                    btn.removeClass("btn-warning").addClass("btn-outline-secondary").html('<i class="fas fa-draw-polygon"></i> Multi-Select');
                }
            }

            function getVisibleLayers() {
                const filterValue = $('input[name="layerFilter"]:checked').val();
                return "needy" === filterValue ? [neediesLayer] : "charity" === filterValue ? [charitiesLayer] : [neediesLayer, charitiesLayer];
            }

            function updateLayerVisibility() {
                if (neediesLayer) neediesLayer.visible = "needy" === $('input[name="layerFilter"]:checked').val() || "both" === $('input[name="layerFilter"]:checked').val();
                if (charitiesLayer) charitiesLayer.visible = "charity" === $('input[name="layerFilter"]:checked').val() || "both" === $('input[name="layerFilter"]:checked').val();
            }

            // ✅ Enhanced AI Chat functions
            function initializeChat() {
                $('#ai-chat-messages').append(`
                    <div class="ai-message">
                        <strong>🤖 AI Search Assistant</strong><br>
                        I can help you find donation opportunities quickly! Try these:
                        <div class="suggestions-container mt-3">
                            <button type="button" class="suggestion-btn btn btn-outline-primary btn-sm me-1 mb-1"
                                    data-suggestion="Medical cases in Cairo under 1000">🏥 Medical in Cairo < 1000</button>
                            <button type="button" class="suggestion-btn btn btn-outline-success btn-sm me-1 mb-1"
                                    data-suggestion="Education needs in Alexandria">📚 Education in Alexandria</button>
                            <button type="button" class="suggestion-btn btn btn-outline-info btn-sm me-1 mb-1"
                                    data-suggestion="Food assistance over 500">🍞 Food assistance > 500</button>
                            <button type="button" class="suggestion-btn btn btn-outline-warning btn-sm me-1 mb-1"
                                    data-suggestion="Housing needs">🏠 Housing needs</button>
                            <button type="button" class="suggestion-btn btn btn-outline-danger btn-sm me-1 mb-1"
                                    data-suggestion="Find nearest cases">📍 Find Near Me</button>
                            <button type="button" class="suggestion-btn btn btn-outline-secondary btn-sm me-1 mb-1"
                                    data-suggestion="Cases in Menoufia">🏛️ Cases in Menoufia</button>
                        </div>
                        <small class="text-muted mt-2 d-block">
                            <i class="fas fa-lightbulb me-1"></i>
                            You can search in Arabic or English. Just describe what you're looking for!
                        </small>
                    </div>
                `);
                scrollToBottom();
            }

            function handleAiSearch(e) {
                e.preventDefault();
                const userQuery = $('#ai-chat-input').val().trim();
                if (!userQuery) return;

                if (userQuery.length > 500) {
                    $('#ai-chat-messages').append(`
                        <div class="ai-message error">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Your query is too long. Please keep it under 500 characters.
                        </div>
                    `);
                    scrollToBottom();
                    return;
                }

                $('#ai-chat-messages').append(`<div class="user-message">${escapeHtml(userQuery)}</div>`);
                $('#ai-chat-input').val('');
                scrollToBottom();

                const thinkingMessage = $(`
                    <div class="ai-message thinking">
                        <div class="d-flex align-items-center">
                            <div class="spinner-border spinner-border-sm me-2 thinking-animation" role="status"></div>
                            <span>Analyzing your request...</span>
                        </div>
                        <div class="progress mt-2" style="height: 3px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated"
                                 style="width: 0%;" id="thinking-progress"></div>
                        </div>
                    </div>
                `);
                $('#ai-chat-messages').append(thinkingMessage);
                scrollToBottom();

                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    $('#thinking-progress').css('width', progress + '%');
                }, 500);

                const timeoutId = setTimeout(() => {
                    if ($('.ai-message.thinking').length > 0) {
                        clearInterval(progressInterval);
                        $('.ai-message.thinking').remove();
                        $('#ai-chat-messages').append(`
                            <div class="ai-message error">
                                <i class="fas fa-clock me-2"></i>
                                <strong>Request timed out</strong><br>
                                The AI service is taking longer than expected. Please try:
                                <ul class="mb-2 mt-2 ps-4">
                                    <li>A simpler query (e.g., "medical Cairo")</li>
                                    <li>Check if Ollama is running</li>
                                    <li>Use manual filters instead</li>
                                </ul>
                            </div>
                        `);
                        scrollToBottom();
                    }
                }, 30000);

                $.ajax({
                    url: "/Donate/SearchByAI",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(userQuery),
                    timeout: 30000,
                    success: function(response) {
                        clearTimeout(timeoutId);
                        clearInterval(progressInterval);
                        $('.ai-message.thinking').remove();

                        try {
                            const aiFilters = JSON.parse(response);

                            if (!isValidAIResponse(aiFilters)) {
                                throw new Error("Invalid AI response structure");
                            }

                            const detectedFilters = buildFilterSummary(aiFilters);
                            $('#ai-chat-messages').append(`
                                <div class="ai-message success">
                                    <div class="d-flex align-items-start">
                                        <i class="fas fa-check-circle me-2 mt-1 text-success"></i>
                                        <div>
                                            <strong>Found matching criteria!</strong><br>
                                            <span class="badge bg-success me-1">✓ Filters Applied</span>
                                            <small class="text-muted d-block mt-1">${detectedFilters}</small>
                                        </div>
                                    </div>
                                </div>
                            `);

                            applyAIFilters(aiFilters);

                            setTimeout(() => {
                                if (filteredBeneficiaries.length === 0) {
                                    $('#ai-chat-messages').append(`
                                        <div class="ai-message">
                                            <i class="fas fa-search me-2"></i>
                                            No exact matches found. Try:
                                            <div class="mt-2">
                                                <button type="button" class="suggestion-btn btn btn-outline-secondary btn-sm me-1"
                                                        data-suggestion="show all">Show all cases</button>
                                                <button type="button" class="suggestion-btn btn btn-outline-primary btn-sm"
                                                        data-suggestion="medical cases">Medical cases only</button>
                                            </div>
                                        </div>
                                    `);
                                } else {
                                    $('#ai-chat-messages').append(`
                                        <div class="ai-message">
                                            <i class="fas fa-thumbs-up me-2"></i>
                                            Found <strong>${filteredBeneficiaries.length}</strong> matching cases!
                                            Scroll down to see the results.
                                        </div>
                                    `);
                                }
                                scrollToBottom();
                            }, 1000);

                            setTimeout(() => $('#ai-chat-window').fadeOut(), 4000);

                        } catch (e) {
                            console.error("AI Response parsing error:", e, "Response:", response);
                            $('#ai-chat-messages').append(`
                                <div class="ai-message error">
                                    <i class="fas fa-exclamation-circle me-2"></i>
                                    <strong>Response parsing error</strong><br>
                                    I received a response but couldn't understand it.
                                    <small class="d-block mt-1 text-muted">Try using simpler terms or manual filters above.</small>
                                </div>
                            `);
                        }
                    },
                    error: function(xhr, status, error) {
                        clearTimeout(timeoutId);
                        clearInterval(progressInterval);
                        $('.ai-message.thinking').remove();

                        let errorMessage = "I'm having trouble processing your request.";
                        let suggestion = "You can use the manual filters above instead.";
                        let icon = "fas fa-robot";

                        if (xhr.status === 0) {
                            errorMessage = "Unable to connect to the AI service.";
                            suggestion = "Please check your internet connection.";
                            icon = "fas fa-wifi";
                        } else if (xhr.status === 503) {
                            errorMessage = "AI service is currently unavailable.";
                            suggestion = "Please try again later or use manual filters.";
                            icon = "fas fa-server";
                        } else if (xhr.status === 408 || status === 'timeout') {
                            errorMessage = "The request timed out.";
                            suggestion = "Try using a simpler query like 'medical Cairo'.";
                            icon = "fas fa-clock";
                        } else if (xhr.status === 400) {
                            try {
                                const errorResponse = JSON.parse(xhr.responseText);
                                errorMessage = errorResponse.error || "Invalid request format.";
                            } catch (e) {
                                errorMessage = "Invalid request format.";
                            }
                            icon = "fas fa-exclamation-triangle";
                        }

                        $('#ai-chat-messages').append(`
                            <div class="ai-message error">
                                <i class="${icon} me-2"></i>
                                <strong>${errorMessage}</strong><br>
                                <small class="text-muted">${suggestion}</small>
                            </div>
                        `);
                    },
                    complete: function() {
                        scrollToBottom();
                    }
                });
            }

            function isValidAIResponse(response) {
                if (!response || typeof response !== 'object') return false;
                const validKeys = ['location', 'need_type', 'amount_less_than', 'amount_greater_than'];
                const responseKeys = Object.keys(response);
                return responseKeys.some(key => validKeys.includes(key) && response[key] !== null && response[key] !== undefined && response[key] !== '');
            }

            function buildFilterSummary(filters) {
                const summary = [];

                if (filters.location === "NEAR_ME") {
                    summary.push(`📍 Location: Near your location`);
                } else if (filters.location) {
                    summary.push(`📍 Location: ${filters.location}`);
                }

                if (filters.need_type) summary.push(`🎯 Type: ${filters.need_type}`);
                if (filters.amount_less_than !== undefined) summary.push(`💰 Max: ${filters.amount_less_than} EGP`);
                if (filters.amount_greater_than !== undefined) summary.push(`💰 Min: ${filters.amount_greater_than} EGP`);

                return summary.length > 0 ? summary.join(' • ') : 'General search applied';
            }

            // ✅ Enhanced AI filters application with detailed logging
            function applyAIFilters(aiFilters) {
                clearAllFilters(false);
                console.log("🔍 Applying AI Filters:", aiFilters);

                // ✅ Handle "Near Me" requests specially
                if (aiFilters.location === "NEAR_ME") {
                    findNearMe();

                    $('#ai-chat-messages').append(`
                        <div class="ai-message success">
                            <i class="fas fa-location-arrow me-2"></i>
                            <strong>Searching for nearby cases...</strong><br>
                            <small class="text-muted">Please allow location access when prompted.</small>
                        </div>
                    `);
                    scrollToBottom();
                    return;
                }

                // Handle regular filters with detailed logging
                if (aiFilters.location && typeof aiFilters.location === 'string') {
                    const $locationFilter = $('#governorateFilter');
                    let found = false;

                    console.log("🎯 Looking for location:", aiFilters.location);
                    console.log("📋 Available options in dropdown:");

                    // Print all available options
                    $locationFilter.find('option').each(function(index) {
                        console.log(`  ${index}: "${$(this).val()}" -> "${$(this).text()}"`);
                    });

                    // Look for exact match first
                    $locationFilter.find('option').each(function() {
                        const optionValue = $(this).val();
                        const optionText = $(this).text();

                        if (optionValue === aiFilters.location || optionText === aiFilters.location) {
                            console.log("✅ Exact match found:", optionValue);
                            $locationFilter.val(optionValue);
                            found = true;
                            return false;
                        }
                    });

                    // If no exact match, try partial match
                    if (!found) {
                        console.log("🔍 No exact match, trying partial match...");
                        $locationFilter.find('option').each(function() {
                            const optionValue = $(this).val();
                            const optionText = $(this).text().toLowerCase();
                            const locationValue = aiFilters.location.toLowerCase();

                            if (optionText.includes(locationValue) || locationValue.includes(optionText)) {
                                console.log("✅ Partial match found:", optionValue);
                                $locationFilter.val(optionValue);
                                found = true;
                                return false;
                            }
                        });
                    }

                    // If no match found, try governorate mapping
                    if (!found) {
                        console.log("🔍 No partial match, trying governorate mapping...");
                        const mappedLocation = findGovernorateMapping(aiFilters.location);
                        if (mappedLocation) {
                            $locationFilter.find('option').each(function() {
                                if ($(this).val() === mappedLocation || $(this).text() === mappedLocation) {
                                    console.log("✅ Mapped match found:", mappedLocation);
                                    $locationFilter.val($(this).val());
                                    found = true;
                                    return false;
                                }
                            });
                        }
                    }

                    if (!found) {
                        console.warn('❌ Location not found in dropdown:', aiFilters.location);
                        // Add message in chat
                        $('#ai-chat-messages').append(`
                            <div class="ai-message error">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Location "${aiFilters.location}" not found in available governorates.
                                <small class="d-block mt-1">Showing all locations instead.</small>
                            </div>
                        `);
                    } else {
                        console.log("✅ Final selected value:", $locationFilter.val());
                    }
                }

                // Handle need type filters
                if (aiFilters.need_type && typeof aiFilters.need_type === 'string') {
                    const $fieldFilter = $('#fieldFilter');
                    const needType = aiFilters.need_type.toLowerCase().trim();
                    let found = false;

                    console.log("🎯 Looking for need type:", needType);

                    $fieldFilter.find('option').each(function() {
                        const optionText = $(this).text().toLowerCase();
                        const optionValue = $(this).val().toLowerCase();

                        if (optionText === needType || optionValue === needType) {
                            $fieldFilter.val($(this).val());
                            found = true;
                            console.log("✅ Need type match found:", $(this).val());
                            return false;
                        }
                    });

                    if (!found) {
                        $fieldFilter.find('option').each(function() {
                            const optionText = $(this).text().toLowerCase();
                            if (optionText.includes(needType) || needType.includes(optionText)) {
                                $fieldFilter.val($(this).val());
                                found = true;
                                console.log("✅ Need type partial match found:", $(this).val());
                                return false;
                            }
                        });
                    }

                    if (!found) {
                        console.warn('❌ Need type not found:', needType);
                    }
                }

                // Handle numerical filters
                aiAmountFilter = {};
                if (typeof aiFilters.amount_less_than === 'number' && aiFilters.amount_less_than > 0) {
                    aiAmountFilter.less_than = aiFilters.amount_less_than;
                    console.log("💰 Amount filter (less than):", aiFilters.amount_less_than);
                }
                if (typeof aiFilters.amount_greater_than === 'number' && aiFilters.amount_greater_than >= 0) {
                    aiAmountFilter.greater_than = aiFilters.amount_greater_than;
                    console.log("💰 Amount filter (greater than):", aiFilters.amount_greater_than);
                }

                performFilteringAsync();
            }

            // ✅ Governorate mapping function to solve name mismatch issues
            function findGovernorateMapping(aiLocation) {
                const mappings = {
                    // Alexandria - all possibilities
                    "Al Iskandariyah": ["Alexandria", "الإسكندرية", "Al Iskandariyah", "Al-Iskandariyah"],
                    "Alexandria": ["Al Iskandariyah", "الإسكندرية", "Alexandria"],
                    "الإسكندرية": ["Al Iskandariyah", "Alexandria"],

                    // Cairo
                    "Al Qahirah": ["Cairo", "القاهرة", "Al Qahirah"],
                    "Cairo": ["Al Qahirah", "القاهرة"],
                    "القاهرة": ["Al Qahirah", "Cairo"],

                    // Giza
                    "Al Jizah": ["Giza", "الجيزة", "Al Jizah"],
                    "Giza": ["Al Jizah", "الجيزة"],
                    "الجيزة": ["Al Jizah", "Giza"],

                    // Menoufia
                    "Al Minufiyah": ["Menoufia", "المنوفية", "Al Minufiyah"],
                    "Menoufia": ["Al Minufiyah", "المنوفية"],
                    "المنوفية": ["Al Minufiyah", "Menoufia"]
                };

                if (mappings[aiLocation]) {
                    for (let mapped of mappings[aiLocation]) {
                        // Check if this name exists in dropdown
                        let found = false;
                        $('#governorateFilter option').each(function() {
                            if ($(this).val() === mapped || $(this).text() === mapped) {
                                found = true;
                                return false;
                            }
                        });
                        if (found) {
                            console.log("🔄 Mapped", aiLocation, "to", mapped);
                            return mapped;
                        }
                    }
                }
                return null;
            }

            function scrollToBottom() {
                const messagesContainer = $('#ai-chat-messages')[0];
                if (messagesContainer) {
                    setTimeout(() => {
                        messagesContainer.scrollTo({
                            top: messagesContainer.scrollHeight,
                            behavior: 'smooth'
                        });
                    }, 100);
                }
            }

            function escapeHtml(text) {
                const map = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#039;'
                };
                return text.replace(/[&<>"']/g, m => map[m]);
            }

            // Keyboard shortcuts
            $('#ai-chat-input').on('keydown', function(e) {
                if (e.key === 'Escape') {
                    $('#ai-chat-window').fadeOut();
                }
            });

            // Close when clicking outside window
            $(document).on('click', function(e) {
                if (!$(e.target).closest('#ai-chat-widget').length && $('#ai-chat-window').is(':visible')) {
                    $('#ai-chat-window').fadeOut();
                }
            });
        });
    </script>
}
