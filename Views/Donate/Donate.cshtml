@model Accounts.ViewModels.DonateViewModel
@{
    ViewData["Title"] = "Donate";
    var allFields = Model.Beneficiaries.SelectMany(b => b.HelpFields ?? new List<string>()).Distinct().ToList();
    var allRoles = Model.Beneficiaries.Select(b => b.UserType).Distinct().ToList();
}

<div class="container py-4">
    <div class="row mb-4">
        <div class="col-md-6 mx-auto">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="mb-3">Make a Donation</h3>
                    <form id="donationForm">
                        <div class="mb-3">
                            <label for="TotalDonation" class="form-label">Total Amount to Donate</label>
                            <input asp-for="TotalDonation" class="form-control" id="TotalDonation" type="number" min="1" step="0.01" />
                            <span asp-validation-for="TotalDonation" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Remaining Balance</label>
                            <input class="form-control" id="RemainingBalance" readonly />
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-3">
        <div class="col-md-4">
            <label>Filter by UserType</label>
            <select id="roleFilter" class="form-control">
                <option value="">All Roles</option>
                @foreach (var r in allRoles)
                {
                    <option value="@r">@r</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label>Filter by Help Field</label>
            <select id="fieldFilter" class="form-control">
                <option value="">All Fields</option>
                @foreach (var field in allFields)
                {
                    <option value="@field">@field</option>
                }
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-end justify-content-end">
            <a href="/Donate/ViewDonationHistory" class="btn btn-primary w-100">
                View Donation History
            </a>
        </div>
    </div>

    <!-- Beneficiaries table -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h4 class="mb-3">Beneficiaries & Charities</h4>
                    <div class="table-responsive">
                        <table class="table table-bordered align-middle" id="beneficiariesTable">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Needed</th>
                                    <th>UserType</th>
                                    <th>Fields</th>
                                    <th>Donate</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var b in Model.Beneficiaries)
                                {
                                    var fields = string.Join(",", b.HelpFields ?? new List<string>());
                                    <tr data-id="@b.BeneficiaryId"
                                        data-UserType="@b.UserType"
                                        data-fields="@fields.ToLower()">
                                        <td>@b.Name</td>
                                        <td>@b.NeededAmount</td>
                                        <td>@b.UserType</td>
                                        <td>
                                            @if (b.HelpFields != null && b.HelpFields.Any())
                                            {
                                                foreach (var field in b.HelpFields)
                                                {
                                                    <span class="badge bg-info text-dark">@field</span>
                                                }
                                            }
                                        </td>
                                        <td>
                                            <div class="input-group">
                                                <input type="number" class="form-control donate-amount" min="1" max="@b.NeededAmount" placeholder="Amount" />
                                                <button type="button" class="btn btn-success donate-btn">Donate</button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h4 class="mb-3">Donation Summary</h4>
                    <div class="table-responsive">
                        <table class="table table-striped" id="donationSummary">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>UserType</th>
                                    <th>Fields</th>
                                    <th>Amount</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                    <button class="btn btn-primary" id="submitAllBtn" disabled>Submit All Donations</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        let donations = [];

        function updateRemaining() {
            const total = parseFloat($("#TotalDonation").val()) || 0;
            const used = donations.reduce((sum, d) => sum + d.amount, 0);
            const remaining = total - used;
            $("#RemainingBalance").val(remaining.toFixed(2));
            $("#submitAllBtn").prop("disabled", donations.length === 0 || remaining < 0 || total === 0);
        }

        function updateSummary() {
            const tbody = $("#donationSummary tbody");
            tbody.empty();
            donations.forEach(d => {
                tbody.append(`<tr><td>${d.name}</td><td>${d.UserType}</td><td>${d.fields}</td><td>${d.amount}</td></tr>`);
            });
            updateRemaining();
        }

        $(document).on("input", "#TotalDonation", updateRemaining);

        $(document).on("click", ".donate-btn", function () {
            const row = $(this).closest("tr");
            const id = row.data("id");
            const name = row.find("td").eq(0).text();
            const needed = parseFloat(row.find("td").eq(1).text());
            const UserType = row.find("td").eq(2).text();
            const fields = row.find("td").eq(3).text();
            const input = row.find(".donate-amount");
            const amount = parseFloat(input.val());

            const total = parseFloat($("#TotalDonation").val()) || 0;
            const used = donations.reduce((sum, d) => sum + d.amount, 0);
            if (!amount || amount <= 0 || amount > needed || amount > (total - used)) {
                input.addClass("is-invalid");
                return;
            }

            if (donations.some(d => d.id === id)) {
                alert("You already donated to this person.");
                return;
            }

            input.removeClass("is-invalid");
            donations.push({ id, name, UserType, fields, amount });
            row.find(".donate-btn").prop("disabled", true).text("✓ Donated");
            input.prop("disabled", true);
            updateSummary();
        });

        $("#submitAllBtn").on("click", function () {
            if (donations.length === 0) return;
            // AJAX submit
            const data = donations.map(d => ({ BeneficiaryId: d.id, Amount: d.amount }));
            $.ajax({
                url: '/Donate/SubmitDonations',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (res) {
                    if (res.success) {
        alert('Donations have been successfully recorded!');
                                location.reload();
                    } else {
        alert('An error occurred while saving!');
                            }
                },
                error: function () {
        alert('An error occurred while saving!');
                        }
            });
        });

        $("#roleFilter, #fieldFilter").on("change", function () {
            const selectedRole = $("#roleFilter").val().toLowerCase();
            const selectedField = $("#fieldFilter").val().toLowerCase();

            $("#beneficiariesTable tbody tr").each(function () {
                const row = $(this);
                const UserType = row.data("UserType")?.toLowerCase() || "";
                const fields = row.data("fields") || "";

                const matchRole = !selectedRole || UserType === selectedRole;
                const matchField = !selectedField || fields.includes(selectedField);
                row.toggle(matchRole && matchField);
            });
        });
    </script>
}