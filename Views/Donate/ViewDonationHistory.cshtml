@model IEnumerable<dynamic>
@using System.Text.Json;

@{
    ViewData["Title"] = "Donation History";
    var accounts = ViewBag.Accounts as IEnumerable<dynamic> ?? new List<dynamic>();
}

<div class="container py-4">
    <h2 class="mb-4">Donation History</h2>

    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">User Type</label>
                    <select id="userTypeFilter" class="form-select"></select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Donation Field</label>
                    <select id="fieldFilter" class="form-select"></select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">From Date</label>
                    <input type="date" id="fromDate" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">To Date</label>
                    <input type="date" id="toDate" class="form-control" />
                </div>
                <div class="col-12">
                    <button type="button" id="clearFilters" class="btn btn-secondary me-2">Clear Filters</button>
                    <a href="/Donate" class="btn btn-primary">Back to Donate</a>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-striped" id="donationHistoryTable">
                    <thead class="table-dark">
                        <tr>
                            <th class="sortable-header" data-sort="date" style="cursor: pointer;">Date <i class="sort-icon fas fa-sort"></i></th>
                            <th class="sortable-header" data-sort="recipientEmail" style="cursor: pointer;">Beneficiary Email <i class="sort-icon fas fa-sort"></i></th>
                            <th class="sortable-header" data-sort="userType" style="cursor: pointer;">User Type <i class="sort-icon fas fa-sort"></i></th>
                            <th class="sortable-header" data-sort="donationField" style="cursor: pointer;">Donation Field <i class="sort-icon fas fa-sort"></i></th>
                            <th class="sortable-header" data-sort="amount" style="cursor: pointer;">Donation Amount <i class="sort-icon fas fa-sort"></i></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="5" class="text-center p-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Loading History...</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer d-flex justify-content-between align-items-center flex-wrap gap-2">
            <div>
                <label for="rowsPerPageSelect" class="form-label me-2 mb-0">Rows per page:</label>
                <select id="rowsPerPageSelect" class="form-select form-select-sm d-inline-block" style="width: 75px;">
                    <option value="10">10</option>
                    <option value="25" selected>25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>
            <div id="paginationInfo" class="text-muted"></div>
            <nav id="paginationNav">
                <ul class="pagination pagination-sm mb-0">
                </ul>
            </nav>
        </div>
    </div>
</div>
<br>
<br>
<br>
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        $(function () {
            // --- Global Variables ---
            let allHistoryRecords = [];
            let filteredRecords = [];
            let currentPage = 1;
            let rowsPerPage = 25;
            // *** ADDED: Variables to track sorting state ***
            let currentSortColumn = 'date'; // Default sort column
            let currentSortDirection = 'desc'; // Default sort direction (newest first)

            const rawDonations = @Html.Raw(JsonSerializer.Serialize(Model));
            const accountsLookup = @Html.Raw(JsonSerializer.Serialize(accounts));

            // --- Main Functions ---

            function processInitialData() {
                if (!rawDonations) return;

                allHistoryRecords = rawDonations.map(d => {
                    const account = accountsLookup.find(x => x.email == d.recipient_email);
                    let dateStr = "-";
                    let dateObj = null;
                    if (d.donation_date) {
                        const ms = parseInt(d.donation_date, 10);
                        if (ms > 0) {
                            dateObj = new Date(ms);
                            dateStr = dateObj.toLocaleString('sv-SE'); // Format YYYY-MM-DD HH:MM:SS
                        }
                    }
                    return {
                        date: dateStr,
                        dateObject: dateObj, // Keep date object for accurate sorting
                        recipientEmail: d.recipient_email || "-",
                        userType: account?.userType || "Unknown",
                        donationField: d.donation_field || account?.HelpFields || "-",
                        amount: d.donation_amount || 0
                    };
                });

                populateFilters();
                applyFilters();
            }

            function applyFilters() {
                const selectedUserType = $('#userTypeFilter').val();
                const selectedField = $('#fieldFilter').val();
                const fromDate = $('#fromDate').val();
                const toDate = $('#toDate').val();

                filteredRecords = allHistoryRecords.filter(record => {
                    const typeMatch = !selectedUserType || record.userType === selectedUserType;
                    const fieldMatch = !selectedField || record.donationField === selectedField;
                    const fromDateMatch = !fromDate || (record.dateObject && record.dateObject >= new Date(fromDate));
                    const toDateMatch = !toDate || (record.dateObject && record.dateObject <= new Date(new Date(toDate).setHours(23, 59, 59, 999)));
                    return typeMatch && fieldMatch && fromDateMatch && toDateMatch;
                });

                // *** ADDED: Sorting logic ***
                if (currentSortColumn) {
                    filteredRecords.sort((a, b) => {
                        let valA = a[currentSortColumn];
                        let valB = b[currentSortColumn];

                        // Use date object for accurate date sorting
                        if (currentSortColumn === 'date') {
                            valA = a.dateObject;
                            valB = b.dateObject;
                        }

                        let comparison = 0;
                        if (valA > valB) {
                            comparison = 1;
                        } else if (valA < valB) {
                            comparison = -1;
                        }

                        return currentSortDirection === 'asc' ? comparison : -comparison;
                    });
                }

                currentPage = 1;
                updateSortIcons();
                renderTablePage();
            }

            function renderTablePage() {
                const tbody = $("#donationHistoryTable tbody").empty();
                updatePaginationControls();

                if (filteredRecords.length === 0) {
                    tbody.html('<tr><td colspan="5" class="text-center p-5">No matching records found.</td></tr>');
                    return;
                }

                const startIndex = (currentPage - 1) * rowsPerPage;
                const pageItems = filteredRecords.slice(startIndex, startIndex + rowsPerPage);

                pageItems.forEach(rec => {
                    const row = `
                        <tr>
                            <td>${rec.date}</td>
                            <td>${rec.recipientEmail}</td>
                            <td>${rec.userType}</td>
                            <td>${rec.donationField}</td>
                            <td class="text-end">${rec.amount.toLocaleString('en-US', { style: 'currency', currency: 'EGP' })}</td>
                        </tr>`;
                    tbody.append(row);
                });
            }

            // *** NEW: Function to update sort icons in the table header ***
            function updateSortIcons() {
                $('#donationHistoryTable .sort-icon').removeClass('fa-sort-up fa-sort-down').addClass('fa-sort');
                if (currentSortColumn) {
                    const iconClass = currentSortDirection === 'asc' ? 'fa-sort-up' : 'fa-sort-down';
                    $(`th[data-sort="${currentSortColumn}"] .sort-icon`).removeClass('fa-sort').addClass(iconClass);
                }
            }

            function updatePaginationControls() {
                const totalRows = filteredRecords.length;
                const totalPages = Math.ceil(totalRows / rowsPerPage);
                const paginationNav = $('#paginationNav');

                if (totalPages <= 1) {
                    paginationNav.hide();
                    $('#paginationInfo').text(`${totalRows} record(s) found`);
                    return;
                }

                paginationNav.show();
                const navUl = paginationNav.find('ul').empty();
                const prevDisabled = currentPage === 1 ? 'disabled' : '';
                const nextDisabled = currentPage === totalPages ? 'disabled' : '';

                navUl.append(`<li class="page-item ${prevDisabled}" id="prevPage"><a class="page-link" href="#">&laquo;</a></li>`);
                for (let i = 1; i <= totalPages; i++) {
                    const activeClass = (i === currentPage) ? 'active' : '';
                    navUl.append(`<li class="page-item ${activeClass}"><a class="page-link" href="#">${i}</a></li>`);
                }
                navUl.append(`<li class="page-item ${nextDisabled}" id="nextPage"><a class="page-link" href="#">&raquo;</a></li>`);
                $('#paginationInfo').text(`Page ${currentPage} of ${totalPages}`);
            }

            function populateFilters() {
                const userTypes = [...new Set(allHistoryRecords.map(r => r.userType))];
                const fields = [...new Set(allHistoryRecords.map(r => r.donationField))];
                $('#userTypeFilter').html('<option value="">All Types</option>' + userTypes.map(t => `<option value="${t}">${t}</option>`).join(''));
                $('#fieldFilter').html('<option value="">All Fields</option>' + fields.map(f => `<option value="${f}">${f}</option>`).join(''));
            }

            // --- Event Handlers ---
            $("#userTypeFilter, #fieldFilter, #fromDate, #toDate").on('change', applyFilters);

            $("#clearFilters").on('click', function () {
                $("#userTypeFilter, #fieldFilter, #fromDate, #toDate").val("");
                // Reset sorting to default when clearing filters
                currentSortColumn = 'date';
                currentSortDirection = 'desc';
                applyFilters();
            });

            $('#rowsPerPageSelect').on('change', function(){
                rowsPerPage = parseInt($(this).val(), 10);
                currentPage = 1; // Go to first page when changing page size
                renderTablePage();
            });

            $('#paginationNav').on('click', 'a.page-link', function(e){
                e.preventDefault();
                const targetLi = $(this).parent();
                if (targetLi.hasClass('disabled') || targetLi.hasClass('active')) return;
                let newPage = currentPage;
                if (targetLi.is('#prevPage')) newPage--;
                else if (targetLi.is('#nextPage')) newPage++;
                else newPage = parseInt($(this).text(), 10);
                currentPage = newPage;
                renderTablePage();
            });

            // *** ADDED: Click handler for sortable table headers ***
            $('#donationHistoryTable').on('click', '.sortable-header', function() {
                const column = $(this).data('sort');
                if (currentSortColumn === column) {
                    currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSortColumn = column;
                    currentSortDirection = 'asc';
                }
                applyFilters(); // Re-apply filters which will also apply the new sort
            });

            // --- Initial Load ---
            processInitialData();
        });
    </script>
}